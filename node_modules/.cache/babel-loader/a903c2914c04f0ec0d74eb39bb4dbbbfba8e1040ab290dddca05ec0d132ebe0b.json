{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lozan\\\\Desktop\\\\Git\\\\dca-spotfire\\\\frontend\\\\src\\\\InteractiveDCAChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateRate = (Qi, b, D, t) => {\n  if (b === 0) {\n    return Qi * Math.exp(-D * t);\n  }\n  return Qi / Math.pow(1 + b * D * t, 1 / b);\n};\nfunction detectDateColumn(columns) {\n  const candidates = columns.filter(h => {\n    const lower = h.toLowerCase();\n    return lower.includes(\"prod\") && lower.includes(\"date\") || lower.includes(\"proddt\") || lower.includes(\"proddttm\") || lower === \"date\" || lower === \"datetime\";\n  });\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\n}\nfunction detectColumns(columns) {\n  let phases = {};\n  columns.forEach(header => {\n    const lower = header.toLowerCase();\n    if (lower.includes(\"bopd\") || lower.includes(\"oil\") && !phases.oil) {\n      phases.oil = header;\n    }\n    if (lower.includes(\"bwpd\") || lower.includes(\"water\") && !phases.water) {\n      phases.water = header;\n    }\n    if (lower.includes(\"mcfd\") || lower.includes(\"gas\") && !phases.gas) {\n      phases.gas = header;\n    }\n    if ((lower.includes(\"pip\") || lower.includes(\"pressure\") || lower.includes(\"psi\")) && !phases.pressure) {\n      phases.pressure = header;\n    }\n  });\n  return phases;\n}\nexport default function InteractiveDCAChart({\n  dataString,\n  startDate,\n  endDate,\n  colors,\n  yScaleType,\n  yMultiplier,\n  forecastDays,\n  autoForecast = true,\n  onParametersCalculated\n}) {\n  _s();\n  const svgRef = useRef(null);\n  const xScaleRef = useRef(null);\n  const yScaleRef = useRef(null);\n\n  // For tooltip\n  const [hoverInfo, setHoverInfo] = useState(null);\n\n  // Parameters\n  const [phaseParams, setPhaseParams] = useState({});\n  const [autoFitEnabled, setAutoFitEnabled] = useState(true);\n  const [activeKey, setActiveKey] = useState(null);\n  const [activePhase, setActivePhase] = useState(null);\n\n  // Prevent infinite loops\n  const prevParamsRef = useRef({});\n  const lastOnParamsCallRef = useRef(null);\n\n  // Parse CSV data\n  const parsedData = useMemo(() => {\n    try {\n      return d3.csvParse(dataString);\n    } catch (err) {\n      console.error(\"Error parsing CSV:\", err);\n      return [];\n    }\n  }, [dataString]);\n\n  // Basic data processing\n  const hasData = parsedData.length > 0;\n  const prodDateCol = useMemo(() => hasData ? detectDateColumn(parsedData.columns) : \"Production_Date\", [hasData, parsedData]);\n  const phasesDetected = useMemo(() => hasData ? detectColumns(parsedData.columns) : {}, [hasData, parsedData]);\n\n  // Filter data based on date range\n  const filteredData = useMemo(() => {\n    if (!hasData) return [];\n\n    // Parse dates and filter invalid\n    let arr = parsedData.map(row => ({\n      ...row,\n      [prodDateCol]: new Date(row[prodDateCol])\n    })).filter(row => !isNaN(row[prodDateCol].getTime()));\n\n    // Sort by date\n    arr.sort((a, b) => a[prodDateCol] - b[prodDateCol]);\n\n    // Apply date filters if provided\n    if (startDate) {\n      const sd = new Date(startDate);\n      arr = arr.filter(row => row[prodDateCol] >= sd);\n    }\n    if (endDate) {\n      const ed = new Date(endDate);\n      arr = arr.filter(row => row[prodDateCol] <= ed);\n    }\n    return arr;\n  }, [parsedData, prodDateCol, startDate, endDate, hasData]);\n  const localHasData = filteredData.length > 0;\n\n  // Get first date and calculate relative times\n  const firstDate = useMemo(() => localHasData ? filteredData[0][prodDateCol] : new Date(), [localHasData, filteredData, prodDateCol]);\n  const data = useMemo(() => {\n    if (!localHasData) return [];\n    return filteredData.map(row => {\n      const date = row[prodDateCol];\n      return {\n        ...row,\n        t: (date - firstDate) / (1000 * 60 * 60 * 24)\n      };\n    });\n  }, [filteredData, localHasData, firstDate, prodDateCol]);\n\n  // Extract phase data\n  const phaseData = useMemo(() => {\n    let result = {};\n    Object.keys(phasesDetected).forEach(phase => {\n      result[phase] = data.map(d => ({\n        t: d.t,\n        value: +d[phasesDetected[phase]]\n      })).filter(d => !isNaN(d.value));\n    });\n    return result;\n  }, [data, phasesDetected]);\n\n  // Get max time and last production date\n  const tMax = useMemo(() => localHasData ? d3.max(data, d => d.t) : 0, [data, localHasData]);\n  const lastProdDate = useMemo(() => localHasData ? d3.max(data, d => d[prodDateCol]) : new Date(), [data, localHasData, prodDateCol]);\n\n  // Auto-fit parameters (simplified)\n  useEffect(() => {\n    if (!localHasData || !autoFitEnabled) return;\n    let newParams = {};\n    Object.keys(phaseData).forEach(phase => {\n      const points = phaseData[phase];\n      if (points.length < 3) {\n        var _points$;\n        newParams[phase] = {\n          Qi: (points === null || points === void 0 ? void 0 : (_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.value) || 100,\n          b: 0.5,\n          D: 0.05\n        };\n      } else {\n        // Simple fit - find the first and last points\n        const first = points[0];\n        const last = points[points.length - 1];\n\n        // Default values\n        const Qi = first.value;\n        const b = 0.5; // Reasonable default\n\n        // Calculate D based on decline between first and last points\n        const ratio = last.value / first.value;\n        const t = last.t - first.t;\n        let D;\n        if (b === 0) {\n          // Exponential\n          D = -Math.log(ratio) / t;\n        } else {\n          // Hyperbolic\n          D = ((1 / ratio) ** b - 1) / (b * t);\n        }\n\n        // Ensure D is reasonable\n        D = Math.max(0.001, Math.min(0.5, D));\n        newParams[phase] = {\n          Qi,\n          b,\n          D\n        };\n      }\n    });\n\n    // Only update if parameters changed\n    if (JSON.stringify(newParams) !== JSON.stringify(prevParamsRef.current)) {\n      prevParamsRef.current = newParams;\n      setPhaseParams(newParams);\n    }\n  }, [phaseData, localHasData, autoFitEnabled]);\n\n  // Convert phase data to points for plotting\n  const allHistoricalPoints = useMemo(() => {\n    let out = [];\n    Object.keys(phaseData).forEach(phase => {\n      phaseData[phase].forEach(d => {\n        out.push({\n          date: new Date(firstDate.getTime() + d.t * 86400000),\n          Q: d.value,\n          phase\n        });\n      });\n    });\n    return out;\n  }, [phaseData, firstDate]);\n\n  // Simple forecast calculation\n  const allForecastPoints = useMemo(() => {\n    if (!localHasData) return {};\n    let out = {};\n    Object.keys(phaseParams).forEach(phase => {\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase] || {};\n      if (!Qi || D <= 0) {\n        out[phase] = [];\n        return;\n      }\n\n      // Calculate last rate at tMax\n      const lastRate = calculateRate(Qi, b, D, tMax);\n\n      // Create forecast points\n      const points = [];\n      const steps = 50;\n\n      // Add the start point (last production date)\n      points.push({\n        date: lastProdDate,\n        Q: lastRate,\n        phase\n      });\n\n      // Add forecast points\n      for (let i = 1; i <= steps; i++) {\n        const days = i / steps * forecastDays;\n        const t = tMax + days;\n        const Q = calculateRate(Qi, b, D, t);\n        const date = new Date(lastProdDate.getTime() + days * 86400000);\n        points.push({\n          date,\n          Q,\n          phase\n        });\n      }\n      out[phase] = points;\n    });\n    return out;\n  }, [phaseParams, tMax, lastProdDate, forecastDays, localHasData]);\n\n  // Calculate EUR and forecast average\n  const calculatedEUR = useMemo(() => {\n    let results = {};\n    Object.keys(phaseParams).forEach(phase => {\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase] || {};\n      if (!Qi || D <= 0) {\n        results[phase] = \"N/A\";\n        return;\n      }\n      if (b === 0) results[phase] = Qi / D;else if (b > 0 && b < 1) results[phase] = Qi / (D * (1 - b));else if (b === 1) results[phase] = Qi * 10000;else results[phase] = \"N/A\";\n    });\n    return results;\n  }, [phaseParams]);\n  const forecastAverage = useMemo(() => {\n    let fa = {};\n    Object.keys(phaseParams).forEach(phase => {\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase] || {};\n      if (!Qi || D <= 0) {\n        fa[phase] = 0;\n        return;\n      }\n      const Q_start = calculateRate(Qi, b, D, tMax);\n      const steps = 60;\n      let sum = 0;\n      for (let i = 0; i <= steps; i++) {\n        const t = tMax + i / steps * 60;\n        const Q = calculateRate(Qi, b, D, t);\n        sum += Q;\n      }\n      fa[phase] = sum / (steps + 1);\n    });\n    return fa;\n  }, [phaseParams, tMax]);\n\n  // Call onParametersCalculated when params change\n  useEffect(() => {\n    if (!onParametersCalculated) return;\n    const newParams = {\n      phaseParams,\n      calculatedEUR,\n      forecastAverage\n    };\n    const stringifiedNew = JSON.stringify(newParams);\n    const stringifiedPrev = JSON.stringify(lastOnParamsCallRef.current);\n    if (stringifiedNew !== stringifiedPrev) {\n      lastOnParamsCallRef.current = newParams;\n      onParametersCalculated(newParams);\n    }\n  }, [phaseParams, calculatedEUR, forecastAverage, onParametersCalculated]);\n\n  // Enhanced key event handling\n  useEffect(() => {\n    const handleKeyDown = e => {\n      const key = e.key.toLowerCase();\n      if ([\"d\", \"q\", \"b\"].includes(key)) {\n        setActiveKey(key);\n      }\n    };\n    const handleKeyUp = () => {\n      setActiveKey(null);\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n\n  // Helper function to get appropriate sensitivity for each parameter\n  const getAdjustmentForDrag = (key, dy, originalValue) => {\n    switch (key) {\n      case \"d\":\n        // Very fine control for D parameter - percentage based change\n        return Math.max(0.0001, originalValue * (1 - dy * 0.0005));\n      case \"q\":\n        // Linear change for Qi but not too extreme\n        return Math.max(1, originalValue - dy * 0.5);\n      case \"b\":\n        // Fine control for b with range limiting\n        return Math.max(0, Math.min(1, originalValue + dy * 0.002));\n      default:\n        return originalValue;\n    }\n  };\n\n  // D3 rendering\n  useEffect(() => {\n    if (!localHasData || !svgRef.current) {\n      return;\n    }\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 60\n    };\n    const width = 800;\n    const height = 400;\n    const svg = d3.select(svgRef.current);\n\n    // Clear previous content\n    svg.selectAll(\"*\").remove();\n\n    // Create chart area group with z-index layering\n    const baseLayer = svg.append(\"g\").attr(\"class\", \"base-layer\");\n    const dataLayer = svg.append(\"g\").attr(\"class\", \"data-layer\");\n    const forecastLayer = svg.append(\"g\").attr(\"class\", \"forecast-layer\");\n    const axisLayer = svg.append(\"g\").attr(\"class\", \"axis-layer\");\n    const overlayLayer = svg.append(\"g\").attr(\"class\", \"overlay-layer\");\n\n    // Create background for plot area\n    baseLayer.append(\"rect\").attr(\"x\", margin.left).attr(\"y\", margin.top).attr(\"width\", width - margin.left - margin.right).attr(\"height\", height - margin.top - margin.bottom).attr(\"fill\", \"#f8f8f8\").attr(\"stroke\", \"#ccc\");\n\n    // Set up scales\n    const dateExtent = d3.extent([...allHistoricalPoints.map(d => d.date), ...Object.values(allForecastPoints).flat().map(d => d.date)]);\n    const minDate = dateExtent[0] || new Date();\n    const maxDate = dateExtent[1] || new Date();\n    const qValues = [...allHistoricalPoints.map(d => d.Q), ...Object.values(allForecastPoints).flat().map(d => d.Q)];\n    const qExtent = d3.extent(qValues);\n    let minQ = qExtent[0] || 0;\n    let maxQ = qExtent[1] || 100;\n\n    // Add padding for Y axis\n    if (yScaleType !== \"log\") {\n      const qRange = maxQ - minQ;\n      maxQ = maxQ + qRange * 0.1;\n      minQ = Math.max(0, minQ - qRange * 0.05);\n    } else if (minQ <= 0) {\n      minQ = 0.01;\n    }\n\n    // Create scales\n    const xScale = d3.scaleTime().domain([minDate, maxDate]).range([margin.left, width - margin.right]);\n    xScaleRef.current = xScale;\n    const yScale = yScaleType === \"log\" ? d3.scaleLog().domain([Math.max(0.01, minQ), maxQ]).range([height - margin.bottom, margin.top]) : d3.scaleLinear().domain([minQ, maxQ]).range([height - margin.bottom, margin.top]);\n    yScaleRef.current = yScale;\n\n    // Add grid lines\n    baseLayer.append(\"g\").attr(\"class\", \"grid y-grid\").attr(\"opacity\", 0.3).attr(\"transform\", `translate(${margin.left},0)`).call(d3.axisLeft(yScale).tickSize(-(width - margin.left - margin.right)).tickFormat(\"\"));\n    baseLayer.append(\"g\").attr(\"class\", \"grid x-grid\").attr(\"opacity\", 0.3).attr(\"transform\", `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale).tickSize(-(height - margin.top - margin.bottom)).tickFormat(\"\"));\n\n    // Draw historical data points\n    Object.keys(phasesDetected).forEach(phase => {\n      const points = allHistoricalPoints.filter(p => p.phase === phase);\n      dataLayer.selectAll(`circle.${phase}`).data(points).enter().append(\"circle\").attr(\"class\", phase).attr(\"cx\", d => xScale(d.date)).attr(\"cy\", d => yScale(d.Q)).attr(\"r\", 3).attr(\"fill\", colors[phase] || \"#888\");\n    });\n\n    // Draw historical trend lines\n    Object.keys(phaseParams).forEach(phase => {\n      var _phaseData$phase;\n      // Only draw if we have parameters and data\n      if (!phaseParams[phase] || !((_phaseData$phase = phaseData[phase]) !== null && _phaseData$phase !== void 0 && _phaseData$phase.length)) return;\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase];\n\n      // Create line data\n      const lineData = [];\n      const steps = 100;\n      for (let i = 0; i <= steps; i++) {\n        const frac = i / steps;\n        const t = tMax * frac;\n        const Q = calculateRate(Qi, b, D, t);\n        const date = new Date(firstDate.getTime() + t * 86400000);\n        lineData.push({\n          date,\n          Q\n        });\n      }\n\n      // Create line generator\n      const lineGen = d3.line().x(d => xScale(d.date)).y(d => yScale(d.Q)).curve(d3.curveMonotoneX);\n\n      // Draw line\n      dataLayer.append(\"path\").datum(lineData).attr(\"class\", `decline-line-${phase}`).attr(\"fill\", \"none\").attr(\"stroke\", colors[phase] || \"#888\").attr(\"stroke-width\", 2).attr(\"d\", lineGen).style(\"cursor\", \"pointer\").on(\"mouseover\", function () {\n        // Highlight on hover\n        d3.select(this).attr(\"stroke-width\", 4);\n      }).on(\"mouseout\", function () {\n        // Reset to normal if not active\n        if (phase !== activePhase) {\n          d3.select(this).attr(\"stroke-width\", 2);\n        }\n      }).on(\"mousedown\", function () {\n        setActivePhase(phase);\n        d3.select(this).attr(\"stroke-width\", 4);\n      }).call(d3.drag().filter(event => activeKey !== null) // Only drag when key is pressed\n      .on(\"start\", function (event) {\n        // Disable auto-fit when user starts adjusting\n        if (autoFitEnabled) setAutoFitEnabled(false);\n\n        // Store the original parameter values\n        event.subject = {\n          originalParams: {\n            ...phaseParams[phase]\n          },\n          startY: event.y\n        };\n      }).on(\"drag\", function (event) {\n        if (!activeKey || !event.subject) return;\n        const {\n          originalParams,\n          startY\n        } = event.subject;\n        const dy = event.y - startY;\n        setPhaseParams(prev => {\n          const copy = {\n            ...prev\n          };\n          const curr = {\n            ...copy[phase]\n          };\n\n          // Apply parameter adjustment based on key and drag distance\n          if (activeKey === \"d\") {\n            curr.D = getAdjustmentForDrag(\"d\", dy, originalParams.D);\n          } else if (activeKey === \"q\") {\n            curr.Qi = getAdjustmentForDrag(\"q\", dy, originalParams.Qi);\n          } else if (activeKey === \"b\") {\n            curr.b = getAdjustmentForDrag(\"b\", dy, originalParams.b);\n          }\n          copy[phase] = curr;\n          return copy;\n        });\n      }));\n    });\n\n    // Draw forecast lines\n    Object.keys(allForecastPoints).forEach(phase => {\n      const forecastPoints = allForecastPoints[phase];\n      if (forecastPoints.length > 1) {\n        const lineGen = d3.line().x(d => xScale(d.date)).y(d => yScale(d.Q)).curve(d3.curveMonotoneX);\n        forecastLayer.append(\"path\").datum(forecastPoints).attr(\"class\", `forecast-line-${phase}`).attr(\"fill\", \"none\").attr(\"stroke\", d3.color(colors[phase] || \"#888\").brighter(1.2)).attr(\"stroke-width\", 3).attr(\"stroke-dasharray\", \"5,3\").attr(\"d\", lineGen).on(\"mouseover\", function () {\n          d3.select(this).attr(\"stroke-width\", 5);\n        }).on(\"mouseout\", function () {\n          d3.select(this).attr(\"stroke-width\", 3);\n        });\n      }\n    });\n\n    // Add vertical line at last production date\n    overlayLayer.append(\"line\").attr(\"x1\", xScale(lastProdDate)).attr(\"y1\", margin.top).attr(\"x2\", xScale(lastProdDate)).attr(\"y2\", height - margin.bottom).attr(\"stroke\", \"#666\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"5,5\");\n\n    // Add forecast label\n    overlayLayer.append(\"text\").attr(\"x\", xScale(lastProdDate) + 5).attr(\"y\", margin.top + 15).attr(\"fill\", \"#666\").text(\"Forecast →\");\n\n    // Add axes\n    const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\n    axisLayer.append(\"g\").attr(\"transform\", `translate(0,${height - margin.bottom})`).call(xAxis).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n    const yAxis = yScaleType === \"log\" ? d3.axisLeft(yScale).ticks(6, \"~s\") : d3.axisLeft(yScale);\n    axisLayer.append(\"g\").attr(\"transform\", `translate(${margin.left},0)`).call(yAxis);\n\n    // Add axis labels\n    axisLayer.append(\"text\").attr(\"x\", width / 2).attr(\"y\", height - 5).style(\"text-anchor\", \"middle\").text(\"Date\");\n    axisLayer.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"x\", -height / 2).attr(\"y\", 15).style(\"text-anchor\", \"middle\").text(\"Production Rate\");\n\n    // Add zoom behavior\n    const zoom = d3.zoom().scaleExtent([0.5, 10]).on(\"zoom\", event => {\n      const newYScale = event.transform.rescaleY(yScale);\n      yScaleRef.current = newYScale;\n\n      // Update circles\n      dataLayer.selectAll(\"circle\").attr(\"cy\", d => newYScale(d.Q));\n\n      // Update historical paths\n      dataLayer.selectAll(\"path\").attr(\"d\", function (d) {\n        if (!Array.isArray(d)) return;\n        const lineGen = d3.line().x(d => xScale(d.date)).y(d => newYScale(d.Q)).curve(d3.curveMonotoneX);\n        return lineGen(d);\n      });\n\n      // Update forecast paths\n      forecastLayer.selectAll(\"path\").attr(\"d\", function (d) {\n        if (!Array.isArray(d)) return;\n        const lineGen = d3.line().x(d => xScale(d.date)).y(d => newYScale(d.Q)).curve(d3.curveMonotoneX);\n        return lineGen(d);\n      });\n\n      // Update y-axis\n      axisLayer.select(\"g\").call(yAxis.scale(newYScale));\n    });\n    svg.call(zoom);\n  }, [localHasData, allHistoricalPoints, allForecastPoints, phasesDetected, phaseParams, phaseData, firstDate, tMax, lastProdDate, yScaleType, colors, activeKey, activePhase, forecastDays]);\n\n  // Render component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        bottom: -45,\n        left: 0,\n        display: 'flex',\n        gap: 20,\n        alignItems: 'center',\n        fontSize: 12,\n        color: '#666',\n        zIndex: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Key:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 11\n        }, this), \" \", activeKey ? activeKey.toUpperCase() : \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Phase:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 11\n        }, this), \" \", activePhase ? activePhase.toUpperCase() : \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Instructions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 11\n        }, this), \" Hold D, Q, or B key and drag a decline line to adjust\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: 800,\n      height: 400,\n      onMouseMove: event => {\n        if (!localHasData || !xScaleRef.current) return;\n        const [mouseX] = d3.pointer(event, svgRef.current);\n        const date = xScaleRef.current.invert(mouseX);\n        const t = (date - firstDate) / 86400000;\n        let vals = {};\n        Object.keys(phaseParams).forEach(phase => {\n          const {\n            Qi,\n            b,\n            D\n          } = phaseParams[phase] || {};\n          if (Qi && b !== undefined && D) {\n            vals[phase] = calculateRate(Qi, b, D, t);\n          }\n        });\n        setHoverInfo({\n          x: mouseX,\n          date,\n          values: vals\n        });\n      },\n      onMouseOut: () => setHoverInfo(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 7\n    }, this), hoverInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: hoverInfo.x + 5,\n        top: 0,\n        pointerEvents: 'none',\n        background: 'rgba(255,255,255,0.9)',\n        border: '1px solid #ccc',\n        padding: 5,\n        fontSize: 12,\n        borderRadius: 4,\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: hoverInfo.date.toDateString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 11\n      }, this), Object.keys(hoverInfo.values).map(ph => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [ph.toUpperCase(), \": \", hoverInfo.values[ph].toFixed(2)]\n      }, ph, true, {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 698,\n    columnNumber: 5\n  }, this);\n}\n_s(InteractiveDCAChart, \"/nnJN1DidJZfXnkoEaZaw4/PK9I=\");\n_c = InteractiveDCAChart;\nvar _c;\n$RefreshReg$(_c, \"InteractiveDCAChart\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemo","d3","jsxDEV","_jsxDEV","calculateRate","Qi","b","D","t","Math","exp","pow","detectDateColumn","columns","candidates","filter","h","lower","toLowerCase","includes","length","detectColumns","phases","forEach","header","oil","water","gas","pressure","InteractiveDCAChart","dataString","startDate","endDate","colors","yScaleType","yMultiplier","forecastDays","autoForecast","onParametersCalculated","_s","svgRef","xScaleRef","yScaleRef","hoverInfo","setHoverInfo","phaseParams","setPhaseParams","autoFitEnabled","setAutoFitEnabled","activeKey","setActiveKey","activePhase","setActivePhase","prevParamsRef","lastOnParamsCallRef","parsedData","csvParse","err","console","error","hasData","prodDateCol","phasesDetected","filteredData","arr","map","row","Date","isNaN","getTime","sort","a","sd","ed","localHasData","firstDate","data","date","phaseData","result","Object","keys","phase","d","value","tMax","max","lastProdDate","newParams","points","_points$","first","last","ratio","log","min","JSON","stringify","current","allHistoricalPoints","out","push","Q","allForecastPoints","lastRate","steps","i","days","calculatedEUR","results","forecastAverage","fa","Q_start","sum","stringifiedNew","stringifiedPrev","handleKeyDown","e","key","handleKeyUp","window","addEventListener","removeEventListener","getAdjustmentForDrag","dy","originalValue","margin","top","right","bottom","left","width","height","svg","select","selectAll","remove","baseLayer","append","attr","dataLayer","forecastLayer","axisLayer","overlayLayer","dateExtent","extent","values","flat","minDate","maxDate","qValues","qExtent","minQ","maxQ","qRange","xScale","scaleTime","domain","range","yScale","scaleLog","scaleLinear","call","axisLeft","tickSize","tickFormat","axisBottom","p","enter","_phaseData$phase","lineData","frac","lineGen","line","x","y","curve","curveMonotoneX","datum","style","on","drag","event","subject","originalParams","startY","prev","copy","curr","forecastPoints","color","brighter","text","xAxis","timeFormat","yAxis","ticks","zoom","scaleExtent","newYScale","transform","rescaleY","Array","isArray","scale","position","children","display","gap","alignItems","fontSize","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","ref","onMouseMove","mouseX","pointer","invert","vals","undefined","onMouseOut","pointerEvents","background","border","padding","borderRadius","toDateString","ph","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/lozan/Desktop/Git/dca-spotfire/frontend/src/InteractiveDCAChart.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst calculateRate = (Qi, b, D, t) => {\r\n  if (b === 0) {\r\n    return Qi * Math.exp(-D * t);\r\n  }\r\n  return Qi / Math.pow(1 + b * D * t, 1 / b);\r\n};\r\n\r\nfunction detectDateColumn(columns) {\r\n  const candidates = columns.filter(h => {\r\n    const lower = h.toLowerCase();\r\n    return (\r\n      (lower.includes(\"prod\") && lower.includes(\"date\")) ||\r\n      lower.includes(\"proddt\") ||\r\n      lower.includes(\"proddttm\") ||\r\n      lower === \"date\" ||\r\n      lower === \"datetime\"\r\n    );\r\n  });\r\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\r\n}\r\n\r\nfunction detectColumns(columns) {\r\n  let phases = {};\r\n  columns.forEach(header => {\r\n    const lower = header.toLowerCase();\r\n    if (lower.includes(\"bopd\") || (lower.includes(\"oil\") && !phases.oil)) {\r\n      phases.oil = header;\r\n    }\r\n    if (lower.includes(\"bwpd\") || (lower.includes(\"water\") && !phases.water)) {\r\n      phases.water = header;\r\n    }\r\n    if (lower.includes(\"mcfd\") || (lower.includes(\"gas\") && !phases.gas)) {\r\n      phases.gas = header;\r\n    }\r\n    if ((lower.includes(\"pip\") || lower.includes(\"pressure\") || lower.includes(\"psi\")) && !phases.pressure) {\r\n      phases.pressure = header;\r\n    }\r\n  });\r\n  return phases;\r\n}\r\n\r\nexport default function InteractiveDCAChart({\r\n  dataString,\r\n  startDate,\r\n  endDate,\r\n  colors,\r\n  yScaleType,\r\n  yMultiplier,\r\n  forecastDays,\r\n  autoForecast = true,\r\n  onParametersCalculated\r\n}) {\r\n  const svgRef = useRef(null);\r\n  const xScaleRef = useRef(null);\r\n  const yScaleRef = useRef(null);\r\n  \r\n  // For tooltip\r\n  const [hoverInfo, setHoverInfo] = useState(null);\r\n  \r\n  // Parameters\r\n  const [phaseParams, setPhaseParams] = useState({});\r\n  const [autoFitEnabled, setAutoFitEnabled] = useState(true);\r\n  const [activeKey, setActiveKey] = useState(null);\r\n  const [activePhase, setActivePhase] = useState(null);\r\n  \r\n  // Prevent infinite loops\r\n  const prevParamsRef = useRef({});\r\n  const lastOnParamsCallRef = useRef(null);\r\n  \r\n  // Parse CSV data\r\n  const parsedData = useMemo(() => {\r\n    try {\r\n      return d3.csvParse(dataString);\r\n    } catch (err) {\r\n      console.error(\"Error parsing CSV:\", err);\r\n      return [];\r\n    }\r\n  }, [dataString]);\r\n  \r\n  // Basic data processing\r\n  const hasData = parsedData.length > 0;\r\n  const prodDateCol = useMemo(() => \r\n    hasData ? detectDateColumn(parsedData.columns) : \"Production_Date\", \r\n  [hasData, parsedData]);\r\n  \r\n  const phasesDetected = useMemo(() => \r\n    hasData ? detectColumns(parsedData.columns) : {}, \r\n  [hasData, parsedData]);\r\n  \r\n  // Filter data based on date range\r\n  const filteredData = useMemo(() => {\r\n    if (!hasData) return [];\r\n    \r\n    // Parse dates and filter invalid\r\n    let arr = parsedData.map(row => ({\r\n      ...row,\r\n      [prodDateCol]: new Date(row[prodDateCol])\r\n    })).filter(row => !isNaN(row[prodDateCol].getTime()));\r\n    \r\n    // Sort by date\r\n    arr.sort((a, b) => a[prodDateCol] - b[prodDateCol]);\r\n    \r\n    // Apply date filters if provided\r\n    if (startDate) {\r\n      const sd = new Date(startDate);\r\n      arr = arr.filter(row => row[prodDateCol] >= sd);\r\n    }\r\n    if (endDate) {\r\n      const ed = new Date(endDate);\r\n      arr = arr.filter(row => row[prodDateCol] <= ed);\r\n    }\r\n    \r\n    return arr;\r\n  }, [parsedData, prodDateCol, startDate, endDate, hasData]);\r\n  \r\n  const localHasData = filteredData.length > 0;\r\n  \r\n  // Get first date and calculate relative times\r\n  const firstDate = useMemo(() => \r\n    localHasData ? filteredData[0][prodDateCol] : new Date(),\r\n  [localHasData, filteredData, prodDateCol]);\r\n  \r\n  const data = useMemo(() => {\r\n    if (!localHasData) return [];\r\n    return filteredData.map(row => {\r\n      const date = row[prodDateCol];\r\n      return { \r\n        ...row, \r\n        t: (date - firstDate) / (1000 * 60 * 60 * 24) \r\n      };\r\n    });\r\n  }, [filteredData, localHasData, firstDate, prodDateCol]);\r\n  \r\n  // Extract phase data\r\n  const phaseData = useMemo(() => {\r\n    let result = {};\r\n    Object.keys(phasesDetected).forEach(phase => {\r\n      result[phase] = data.map(d => ({\r\n        t: d.t,\r\n        value: +d[phasesDetected[phase]]\r\n      })).filter(d => !isNaN(d.value));\r\n    });\r\n    return result;\r\n  }, [data, phasesDetected]);\r\n  \r\n  // Get max time and last production date\r\n  const tMax = useMemo(() => \r\n    localHasData ? d3.max(data, d => d.t) : 0,\r\n  [data, localHasData]);\r\n  \r\n  const lastProdDate = useMemo(() => \r\n    localHasData ? d3.max(data, d => d[prodDateCol]) : new Date(),\r\n  [data, localHasData, prodDateCol]);\r\n  \r\n  // Auto-fit parameters (simplified)\r\n  useEffect(() => {\r\n    if (!localHasData || !autoFitEnabled) return;\r\n    \r\n    let newParams = {};\r\n    Object.keys(phaseData).forEach(phase => {\r\n      const points = phaseData[phase];\r\n      if (points.length < 3) {\r\n        newParams[phase] = { Qi: points?.[0]?.value || 100, b: 0.5, D: 0.05 };\r\n      } else {\r\n        // Simple fit - find the first and last points\r\n        const first = points[0];\r\n        const last = points[points.length - 1];\r\n        \r\n        // Default values\r\n        const Qi = first.value;\r\n        const b = 0.5;  // Reasonable default\r\n        \r\n        // Calculate D based on decline between first and last points\r\n        const ratio = last.value / first.value;\r\n        const t = last.t - first.t;\r\n        \r\n        let D;\r\n        if (b === 0) {\r\n          // Exponential\r\n          D = -Math.log(ratio) / t;\r\n        } else {\r\n          // Hyperbolic\r\n          D = ((1 / ratio) ** b - 1) / (b * t);\r\n        }\r\n        \r\n        // Ensure D is reasonable\r\n        D = Math.max(0.001, Math.min(0.5, D));\r\n        \r\n        newParams[phase] = { Qi, b, D };\r\n      }\r\n    });\r\n    \r\n    // Only update if parameters changed\r\n    if (JSON.stringify(newParams) !== JSON.stringify(prevParamsRef.current)) {\r\n      prevParamsRef.current = newParams;\r\n      setPhaseParams(newParams);\r\n    }\r\n  }, [phaseData, localHasData, autoFitEnabled]);\r\n  \r\n  // Convert phase data to points for plotting\r\n  const allHistoricalPoints = useMemo(() => {\r\n    let out = [];\r\n    Object.keys(phaseData).forEach(phase => {\r\n      phaseData[phase].forEach(d => {\r\n        out.push({\r\n          date: new Date(firstDate.getTime() + d.t * 86400000),\r\n          Q: d.value,\r\n          phase\r\n        });\r\n      });\r\n    });\r\n    return out;\r\n  }, [phaseData, firstDate]);\r\n  \r\n  // Simple forecast calculation\r\n  const allForecastPoints = useMemo(() => {\r\n    if (!localHasData) return {};\r\n    \r\n    let out = {};\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      const { Qi, b, D } = phaseParams[phase] || {};\r\n      if (!Qi || D <= 0) {\r\n        out[phase] = [];\r\n        return;\r\n      }\r\n      \r\n      // Calculate last rate at tMax\r\n      const lastRate = calculateRate(Qi, b, D, tMax);\r\n      \r\n      // Create forecast points\r\n      const points = [];\r\n      const steps = 50;\r\n      \r\n      // Add the start point (last production date)\r\n      points.push({\r\n        date: lastProdDate,\r\n        Q: lastRate,\r\n        phase\r\n      });\r\n      \r\n      // Add forecast points\r\n      for (let i = 1; i <= steps; i++) {\r\n        const days = (i / steps) * forecastDays;\r\n        const t = tMax + days;\r\n        \r\n        const Q = calculateRate(Qi, b, D, t);\r\n        const date = new Date(lastProdDate.getTime() + days * 86400000);\r\n        \r\n        points.push({\r\n          date,\r\n          Q,\r\n          phase\r\n        });\r\n      }\r\n      \r\n      out[phase] = points;\r\n    });\r\n    \r\n    return out;\r\n  }, [phaseParams, tMax, lastProdDate, forecastDays, localHasData]);\r\n  \r\n  // Calculate EUR and forecast average\r\n  const calculatedEUR = useMemo(() => {\r\n    let results = {};\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      const { Qi, b, D } = phaseParams[phase] || {};\r\n      if (!Qi || D <= 0) {\r\n        results[phase] = \"N/A\";\r\n        return;\r\n      }\r\n      \r\n      if (b === 0) results[phase] = Qi / D;\r\n      else if (b > 0 && b < 1) results[phase] = Qi / (D * (1 - b));\r\n      else if (b === 1) results[phase] = Qi * 10000;\r\n      else results[phase] = \"N/A\";\r\n    });\r\n    return results;\r\n  }, [phaseParams]);\r\n  \r\n  const forecastAverage = useMemo(() => {\r\n    let fa = {};\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      const { Qi, b, D } = phaseParams[phase] || {};\r\n      if (!Qi || D <= 0) {\r\n        fa[phase] = 0;\r\n        return;\r\n      }\r\n      \r\n      const Q_start = calculateRate(Qi, b, D, tMax);\r\n      const steps = 60;\r\n      let sum = 0;\r\n      \r\n      for (let i = 0; i <= steps; i++) {\r\n        const t = tMax + (i / steps) * 60;\r\n        const Q = calculateRate(Qi, b, D, t);\r\n        sum += Q;\r\n      }\r\n      \r\n      fa[phase] = sum / (steps + 1);\r\n    });\r\n    return fa;\r\n  }, [phaseParams, tMax]);\r\n  \r\n  // Call onParametersCalculated when params change\r\n  useEffect(() => {\r\n    if (!onParametersCalculated) return;\r\n    \r\n    const newParams = { phaseParams, calculatedEUR, forecastAverage };\r\n    const stringifiedNew = JSON.stringify(newParams);\r\n    const stringifiedPrev = JSON.stringify(lastOnParamsCallRef.current);\r\n    \r\n    if (stringifiedNew !== stringifiedPrev) {\r\n      lastOnParamsCallRef.current = newParams;\r\n      onParametersCalculated(newParams);\r\n    }\r\n  }, [phaseParams, calculatedEUR, forecastAverage, onParametersCalculated]);\r\n  \r\n  // Enhanced key event handling\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      if ([\"d\", \"q\", \"b\"].includes(key)) {\r\n        setActiveKey(key);\r\n      }\r\n    };\r\n    \r\n    const handleKeyUp = () => {\r\n      setActiveKey(null);\r\n    };\r\n    \r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    window.addEventListener(\"keyup\", handleKeyUp);\r\n    \r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n      window.removeEventListener(\"keyup\", handleKeyUp);\r\n    };\r\n  }, []);\r\n  \r\n  // Helper function to get appropriate sensitivity for each parameter\r\n  const getAdjustmentForDrag = (key, dy, originalValue) => {\r\n    switch (key) {\r\n      case \"d\":\r\n        // Very fine control for D parameter - percentage based change\r\n        return Math.max(0.0001, originalValue * (1 - dy * 0.0005));\r\n      case \"q\":\r\n        // Linear change for Qi but not too extreme\r\n        return Math.max(1, originalValue - dy * 0.5);\r\n      case \"b\":\r\n        // Fine control for b with range limiting\r\n        return Math.max(0, Math.min(1, originalValue + dy * 0.002));\r\n      default:\r\n        return originalValue;\r\n    }\r\n  };\r\n  \r\n  // D3 rendering\r\n  useEffect(() => {\r\n    if (!localHasData || !svgRef.current) {\r\n      return;\r\n    }\r\n    \r\n    const margin = { top: 20, right: 30, bottom: 40, left: 60 };\r\n    const width = 800;\r\n    const height = 400;\r\n    const svg = d3.select(svgRef.current);\r\n    \r\n    // Clear previous content\r\n    svg.selectAll(\"*\").remove();\r\n    \r\n    // Create chart area group with z-index layering\r\n    const baseLayer = svg.append(\"g\").attr(\"class\", \"base-layer\");\r\n    const dataLayer = svg.append(\"g\").attr(\"class\", \"data-layer\");\r\n    const forecastLayer = svg.append(\"g\").attr(\"class\", \"forecast-layer\");\r\n    const axisLayer = svg.append(\"g\").attr(\"class\", \"axis-layer\");\r\n    const overlayLayer = svg.append(\"g\").attr(\"class\", \"overlay-layer\");\r\n    \r\n    // Create background for plot area\r\n    baseLayer.append(\"rect\")\r\n      .attr(\"x\", margin.left)\r\n      .attr(\"y\", margin.top)\r\n      .attr(\"width\", width - margin.left - margin.right)\r\n      .attr(\"height\", height - margin.top - margin.bottom)\r\n      .attr(\"fill\", \"#f8f8f8\")\r\n      .attr(\"stroke\", \"#ccc\");\r\n    \r\n    // Set up scales\r\n    const dateExtent = d3.extent([\r\n      ...allHistoricalPoints.map(d => d.date),\r\n      ...Object.values(allForecastPoints).flat().map(d => d.date)\r\n    ]);\r\n    \r\n    const minDate = dateExtent[0] || new Date();\r\n    const maxDate = dateExtent[1] || new Date();\r\n    \r\n    const qValues = [\r\n      ...allHistoricalPoints.map(d => d.Q),\r\n      ...Object.values(allForecastPoints).flat().map(d => d.Q)\r\n    ];\r\n    \r\n    const qExtent = d3.extent(qValues);\r\n    let minQ = qExtent[0] || 0;\r\n    let maxQ = qExtent[1] || 100;\r\n    \r\n    // Add padding for Y axis\r\n    if (yScaleType !== \"log\") {\r\n      const qRange = maxQ - minQ;\r\n      maxQ = maxQ + qRange * 0.1;\r\n      minQ = Math.max(0, minQ - qRange * 0.05);\r\n    } else if (minQ <= 0) {\r\n      minQ = 0.01;\r\n    }\r\n    \r\n    // Create scales\r\n    const xScale = d3.scaleTime()\r\n      .domain([minDate, maxDate])\r\n      .range([margin.left, width - margin.right]);\r\n    \r\n    xScaleRef.current = xScale;\r\n    \r\n    const yScale = yScaleType === \"log\"\r\n      ? d3.scaleLog()\r\n          .domain([Math.max(0.01, minQ), maxQ])\r\n          .range([height - margin.bottom, margin.top])\r\n      : d3.scaleLinear()\r\n          .domain([minQ, maxQ])\r\n          .range([height - margin.bottom, margin.top]);\r\n    \r\n    yScaleRef.current = yScale;\r\n    \r\n    // Add grid lines\r\n    baseLayer.append(\"g\")\r\n      .attr(\"class\", \"grid y-grid\")\r\n      .attr(\"opacity\", 0.3)\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(\r\n        d3.axisLeft(yScale)\r\n          .tickSize(-(width - margin.left - margin.right))\r\n          .tickFormat(\"\")\r\n      );\r\n    \r\n    baseLayer.append(\"g\")\r\n      .attr(\"class\", \"grid x-grid\")\r\n      .attr(\"opacity\", 0.3)\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(\r\n        d3.axisBottom(xScale)\r\n          .tickSize(-(height - margin.top - margin.bottom))\r\n          .tickFormat(\"\")\r\n      );\r\n    \r\n    // Draw historical data points\r\n    Object.keys(phasesDetected).forEach(phase => {\r\n      const points = allHistoricalPoints.filter(p => p.phase === phase);\r\n      \r\n      dataLayer.selectAll(`circle.${phase}`)\r\n        .data(points)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", phase)\r\n        .attr(\"cx\", d => xScale(d.date))\r\n        .attr(\"cy\", d => yScale(d.Q))\r\n        .attr(\"r\", 3)\r\n        .attr(\"fill\", colors[phase] || \"#888\");\r\n    });\r\n    \r\n    // Draw historical trend lines\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      // Only draw if we have parameters and data\r\n      if (!phaseParams[phase] || !phaseData[phase]?.length) return;\r\n      \r\n      const { Qi, b, D } = phaseParams[phase];\r\n      \r\n      // Create line data\r\n      const lineData = [];\r\n      const steps = 100;\r\n      \r\n      for (let i = 0; i <= steps; i++) {\r\n        const frac = i / steps;\r\n        const t = tMax * frac;\r\n        const Q = calculateRate(Qi, b, D, t);\r\n        const date = new Date(firstDate.getTime() + t * 86400000);\r\n        \r\n        lineData.push({ date, Q });\r\n      }\r\n      \r\n      // Create line generator\r\n      const lineGen = d3.line()\r\n        .x(d => xScale(d.date))\r\n        .y(d => yScale(d.Q))\r\n        .curve(d3.curveMonotoneX);\r\n      \r\n      // Draw line\r\n      dataLayer.append(\"path\")\r\n        .datum(lineData)\r\n        .attr(\"class\", `decline-line-${phase}`)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", colors[phase] || \"#888\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"d\", lineGen)\r\n        .style(\"cursor\", \"pointer\")\r\n        .on(\"mouseover\", function() {\r\n          // Highlight on hover\r\n          d3.select(this).attr(\"stroke-width\", 4);\r\n        })\r\n        .on(\"mouseout\", function() {\r\n          // Reset to normal if not active\r\n          if (phase !== activePhase) {\r\n            d3.select(this).attr(\"stroke-width\", 2);\r\n          }\r\n        })\r\n        .on(\"mousedown\", function() {\r\n          setActivePhase(phase);\r\n          d3.select(this).attr(\"stroke-width\", 4);\r\n        })\r\n        .call(\r\n          d3.drag()\r\n            .filter(event => activeKey !== null) // Only drag when key is pressed\r\n            .on(\"start\", function(event) {\r\n              // Disable auto-fit when user starts adjusting\r\n              if (autoFitEnabled) setAutoFitEnabled(false);\r\n              \r\n              // Store the original parameter values\r\n              event.subject = { \r\n                originalParams: {...phaseParams[phase]},\r\n                startY: event.y\r\n              };\r\n            })\r\n            .on(\"drag\", function(event) {\r\n              if (!activeKey || !event.subject) return;\r\n              \r\n              const { originalParams, startY } = event.subject;\r\n              const dy = event.y - startY;\r\n              \r\n              setPhaseParams(prev => {\r\n                const copy = { ...prev };\r\n                const curr = { ...copy[phase] };\r\n                \r\n                // Apply parameter adjustment based on key and drag distance\r\n                if (activeKey === \"d\") {\r\n                  curr.D = getAdjustmentForDrag(\"d\", dy, originalParams.D);\r\n                } else if (activeKey === \"q\") {\r\n                  curr.Qi = getAdjustmentForDrag(\"q\", dy, originalParams.Qi);\r\n                } else if (activeKey === \"b\") {\r\n                  curr.b = getAdjustmentForDrag(\"b\", dy, originalParams.b);\r\n                }\r\n                \r\n                copy[phase] = curr;\r\n                return copy;\r\n              });\r\n            })\r\n        );\r\n    });\r\n    \r\n    // Draw forecast lines\r\n    Object.keys(allForecastPoints).forEach(phase => {\r\n      const forecastPoints = allForecastPoints[phase];\r\n      \r\n      if (forecastPoints.length > 1) {\r\n        const lineGen = d3.line()\r\n          .x(d => xScale(d.date))\r\n          .y(d => yScale(d.Q))\r\n          .curve(d3.curveMonotoneX);\r\n        \r\n        forecastLayer.append(\"path\")\r\n          .datum(forecastPoints)\r\n          .attr(\"class\", `forecast-line-${phase}`)\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", d3.color(colors[phase] || \"#888\").brighter(1.2))\r\n          .attr(\"stroke-width\", 3)\r\n          .attr(\"stroke-dasharray\", \"5,3\")\r\n          .attr(\"d\", lineGen)\r\n          .on(\"mouseover\", function() {\r\n            d3.select(this).attr(\"stroke-width\", 5);\r\n          })\r\n          .on(\"mouseout\", function() {\r\n            d3.select(this).attr(\"stroke-width\", 3);\r\n          });\r\n      }\r\n    });\r\n    \r\n    // Add vertical line at last production date\r\n    overlayLayer.append(\"line\")\r\n      .attr(\"x1\", xScale(lastProdDate))\r\n      .attr(\"y1\", margin.top)\r\n      .attr(\"x2\", xScale(lastProdDate))\r\n      .attr(\"y2\", height - margin.bottom)\r\n      .attr(\"stroke\", \"#666\")\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"stroke-dasharray\", \"5,5\");\r\n    \r\n    // Add forecast label\r\n    overlayLayer.append(\"text\")\r\n      .attr(\"x\", xScale(lastProdDate) + 5)\r\n      .attr(\"y\", margin.top + 15)\r\n      .attr(\"fill\", \"#666\")\r\n      .text(\"Forecast →\");\r\n    \r\n    // Add axes\r\n    const xAxis = d3.axisBottom(xScale)\r\n      .tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\r\n    \r\n    axisLayer.append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .attr(\"transform\", \"rotate(-45)\")\r\n      .style(\"text-anchor\", \"end\");\r\n    \r\n    const yAxis = yScaleType === \"log\"\r\n      ? d3.axisLeft(yScale).ticks(6, \"~s\")\r\n      : d3.axisLeft(yScale);\r\n    \r\n    axisLayer.append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(yAxis);\r\n    \r\n    // Add axis labels\r\n    axisLayer.append(\"text\")\r\n      .attr(\"x\", width / 2)\r\n      .attr(\"y\", height - 5)\r\n      .style(\"text-anchor\", \"middle\")\r\n      .text(\"Date\");\r\n    \r\n    axisLayer.append(\"text\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"x\", -height / 2)\r\n      .attr(\"y\", 15)\r\n      .style(\"text-anchor\", \"middle\")\r\n      .text(\"Production Rate\");\r\n    \r\n    // Add zoom behavior\r\n    const zoom = d3.zoom()\r\n      .scaleExtent([0.5, 10])\r\n      .on(\"zoom\", event => {\r\n        const newYScale = event.transform.rescaleY(yScale);\r\n        yScaleRef.current = newYScale;\r\n        \r\n        // Update circles\r\n        dataLayer.selectAll(\"circle\")\r\n          .attr(\"cy\", d => newYScale(d.Q));\r\n        \r\n        // Update historical paths\r\n        dataLayer.selectAll(\"path\")\r\n          .attr(\"d\", function(d) {\r\n            if (!Array.isArray(d)) return;\r\n            \r\n            const lineGen = d3.line()\r\n              .x(d => xScale(d.date))\r\n              .y(d => newYScale(d.Q))\r\n              .curve(d3.curveMonotoneX);\r\n            \r\n            return lineGen(d);\r\n          });\r\n        \r\n        // Update forecast paths\r\n        forecastLayer.selectAll(\"path\")\r\n          .attr(\"d\", function(d) {\r\n            if (!Array.isArray(d)) return;\r\n            \r\n            const lineGen = d3.line()\r\n              .x(d => xScale(d.date))\r\n              .y(d => newYScale(d.Q))\r\n              .curve(d3.curveMonotoneX);\r\n            \r\n            return lineGen(d);\r\n          });\r\n        \r\n        // Update y-axis\r\n        axisLayer.select(\"g\")\r\n          .call(yAxis.scale(newYScale));\r\n      });\r\n    \r\n    svg.call(zoom);\r\n    \r\n  }, [\r\n    localHasData,\r\n    allHistoricalPoints,\r\n    allForecastPoints,\r\n    phasesDetected,\r\n    phaseParams,\r\n    phaseData,\r\n    firstDate,\r\n    tMax,\r\n    lastProdDate,\r\n    yScaleType,\r\n    colors,\r\n    activeKey,\r\n    activePhase,\r\n    forecastDays\r\n  ]);\r\n  \r\n  // Render component\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      {/* Status indicator - positioned absolutely below the chart */}\r\n      <div \r\n        style={{ \r\n          position: 'absolute', \r\n          bottom: -45, \r\n          left: 0,\r\n          display: 'flex',\r\n          gap: 20,\r\n          alignItems: 'center',\r\n          fontSize: 12,\r\n          color: '#666',\r\n          zIndex: 5\r\n        }}\r\n      >\r\n        <div>\r\n          <strong>Key:</strong> {activeKey ? activeKey.toUpperCase() : \"None\"}\r\n        </div>\r\n        <div>\r\n          <strong>Phase:</strong> {activePhase ? activePhase.toUpperCase() : \"None\"}\r\n        </div>\r\n        <div>\r\n          <strong>Instructions:</strong> Hold D, Q, or B key and drag a decline line to adjust\r\n        </div>\r\n      </div>\r\n      \r\n      <svg\r\n        ref={svgRef}\r\n        width={800}\r\n        height={400}\r\n        onMouseMove={(event) => {\r\n          if (!localHasData || !xScaleRef.current) return;\r\n          \r\n          const [mouseX] = d3.pointer(event, svgRef.current);\r\n          const date = xScaleRef.current.invert(mouseX);\r\n          const t = (date - firstDate) / 86400000;\r\n          \r\n          let vals = {};\r\n          Object.keys(phaseParams).forEach(phase => {\r\n            const { Qi, b, D } = phaseParams[phase] || {};\r\n            if (Qi && b !== undefined && D) {\r\n              vals[phase] = calculateRate(Qi, b, D, t);\r\n            }\r\n          });\r\n          \r\n          setHoverInfo({ x: mouseX, date, values: vals });\r\n        }}\r\n        onMouseOut={() => setHoverInfo(null)}\r\n      />\r\n      \r\n      {hoverInfo && (\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            left: hoverInfo.x + 5,\r\n            top: 0,\r\n            pointerEvents: 'none',\r\n            background: 'rgba(255,255,255,0.9)',\r\n            border: '1px solid #ccc',\r\n            padding: 5,\r\n            fontSize: 12,\r\n            borderRadius: 4,\r\n            zIndex: 1000\r\n          }}\r\n        >\r\n          <div>{hoverInfo.date.toDateString()}</div>\r\n          {Object.keys(hoverInfo.values).map(ph => (\r\n            <div key={ph}>\r\n              {ph.toUpperCase()}: {hoverInfo.values[ph].toFixed(2)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}