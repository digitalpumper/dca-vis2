{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lozan\\\\Desktop\\\\Git\\\\dca-spotfire\\\\frontend\\\\src\\\\InteractiveDCAChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\n\n// Helper: Darken a HEX color by a given factor.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst darkenColor = (hex, factor = 0.8) => {\n  let c = d3.color(hex);\n  if (c) {\n    c.r = Math.floor(c.r * factor);\n    c.g = Math.floor(c.g * factor);\n    c.b = Math.floor(c.b * factor);\n    return c.formatHex();\n  }\n  return hex;\n};\n\n// Helper: Lighten a HEX color by a given factor.\nconst lightenColor = (hex, factor = 1.2) => {\n  let c = d3.color(hex);\n  if (c) {\n    c.r = Math.min(255, Math.floor(c.r * factor));\n    c.g = Math.min(255, Math.floor(c.g * factor));\n    c.b = Math.min(255, Math.floor(c.b * factor));\n    return c.formatHex();\n  }\n  return hex;\n};\n\n// Auto-detect the production date column from common names.\nconst detectDateColumn = headers => {\n  const candidates = headers.filter(h => {\n    const lower = h.toLowerCase();\n    return lower.includes(\"prod\") && lower.includes(\"date\") || lower.includes(\"proddt\") || lower.includes(\"proddttm\") || lower === \"date\" || lower === \"datetime\";\n  });\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\n};\n\n// Auto-detect measurement columns using keywords.\nconst detectColumns = headers => {\n  let phases = {};\n  headers.forEach(header => {\n    const lower = header.toLowerCase();\n    // For oil: prefer \"bopd\", otherwise any \"oil\".\n    if (lower.includes(\"bopd\")) {\n      phases.oil = header;\n    } else if (lower.includes(\"oil\") && !phases.oil) {\n      phases.oil = header;\n    }\n    // For water: prefer \"bwpd\", otherwise any \"water\".\n    if (lower.includes(\"bwpd\")) {\n      phases.water = header;\n    } else if (lower.includes(\"water\") && !phases.water) {\n      phases.water = header;\n    }\n    // For gas: prefer \"mcfd\", otherwise any \"gas\".\n    if (lower.includes(\"mcfd\")) {\n      phases.gas = header;\n    } else if (lower.includes(\"gas\") && !phases.gas) {\n      phases.gas = header;\n    }\n    // For pressure: look for \"pip\", \"pressure\", or \"psi\".\n    if ((lower.includes(\"pip\") || lower.includes(\"pressure\") || lower.includes(\"psi\")) && !phases.pressure) {\n      phases.pressure = header;\n    }\n  });\n  return phases;\n};\n\n// Compute the average production over the first week (t <= 7 days)\n// Fallback: if no week data exists, use the first data point.\nconst computeAverageFirstWeek = series => {\n  const weekData = series.filter(d => d.t <= 7);\n  return weekData.length > 0 ? d3.mean(weekData, d => d.value) : series[0] ? series[0].value : 0;\n};\n\n// Brute-force search for best-fit D using the last 60 days.\nconst fitD = (fitData, Qi, b) => {\n  let bestD = 0.01;\n  let bestError = Infinity;\n  for (let D = 0.001; D <= 0.1; D += 0.001) {\n    let error = 0;\n    fitData.forEach(d => {\n      const predicted = Qi / Math.pow(1 + b * D * d.t, 1 / b);\n      error += Math.pow(predicted - d.value, 2);\n    });\n    if (error < bestError) {\n      bestError = error;\n      bestD = D;\n    }\n  }\n  return bestD;\n};\nconst InteractiveDCAChart = ({\n  dataString,\n  startDate,\n  endDate\n}) => {\n  _s();\n  // Parse CSV data.\n  const parsedData = useMemo(() => {\n    try {\n      return d3.csvParse(dataString);\n    } catch (err) {\n      console.error(\"Error parsing CSV:\", err);\n      return [];\n    }\n  }, [dataString]);\n  const hasData = parsedData && parsedData.length > 0;\n  const svgRef = useRef(null);\n  const prodDateCol = hasData ? detectDateColumn(parsedData.columns) : \"Production_Date\";\n\n  // Filter data by date.\n  const filteredData = useMemo(() => {\n    if (!hasData) return [];\n    let dataWithDates = parsedData.map(row => ({\n      ...row,\n      [prodDateCol]: new Date(row[prodDateCol])\n    }));\n    dataWithDates = dataWithDates.filter(row => {\n      const d = new Date(row[prodDateCol]);\n      return !isNaN(d.getTime());\n    });\n    if (startDate) {\n      const sd = new Date(startDate);\n      dataWithDates = dataWithDates.filter(row => row[prodDateCol] >= sd);\n    }\n    if (endDate) {\n      const ed = new Date(endDate);\n      dataWithDates = dataWithDates.filter(row => row[prodDateCol] <= ed);\n    }\n    return dataWithDates;\n  }, [parsedData, startDate, endDate, hasData, prodDateCol]);\n  const localHasData = filteredData && filteredData.length > 0;\n  const firstDate = localHasData ? new Date(filteredData[0][prodDateCol]) : new Date();\n  const headers = parsedData.columns ? parsedData.columns : [];\n  const phasesDetected = detectColumns(headers);\n  const data = localHasData ? filteredData.map(row => {\n    const date = new Date(row[prodDateCol]);\n    return {\n      ...row,\n      Production_Date: date,\n      t: (date - firstDate) / (1000 * 60 * 60 * 24)\n    };\n  }) : [];\n  const phaseData = {};\n  Object.keys(phasesDetected).forEach(phase => {\n    phaseData[phase] = localHasData ? data.map(d => ({\n      t: d.t,\n      value: +d[phasesDetected[phase]]\n    })) : [];\n  });\n\n  // tMax: Maximum historical time (in days)\n  const tMax = localHasData ? d3.max(data, d => d.t) : 0;\n  // maxProdDate: Latest production date from the data.\n  const maxProdDate = localHasData ? d3.max(data, d => d.Production_Date) : firstDate;\n\n  // For historical curves, use initial Qi from the first data point.\n  const initialParams = {};\n  if (localHasData) {\n    Object.keys(phaseData).forEach(phase => {\n      const series = phaseData[phase];\n      const Qi = series[0] ? series[0].value : 0;\n      const b = 0.9;\n      const fitSeries = series.filter(d => d.t >= (tMax >= 60 ? tMax - 60 : 0));\n      const D = fitSeries.length > 0 ? fitD(fitSeries, Qi, b) : 0.01;\n      initialParams[phase] = {\n        Qi,\n        b,\n        D\n      };\n    });\n  }\n  const defaultColors = {\n    oil: \"#008000\",\n    water: \"#0000ff\",\n    gas: \"#ff0000\",\n    pressure: \"#000000\"\n  };\n  const [phaseParams, setPhaseParams] = useState(initialParams);\n  const [colors, setColors] = useState(defaultColors);\n  const [activeKey, setActiveKey] = useState(null);\n  const [yScaleType, setYScaleType] = useState(\"linear\");\n  const [yMultiplier, setYMultiplier] = useState(1.1);\n  const [forecastDays, setForecastDays] = useState(30);\n\n  // Global key listeners for hot keys (\"d\", \"q\", \"b\").\n  useEffect(() => {\n    const handleKeyDown = e => {\n      const key = e.key.toLowerCase();\n      if ([\"d\", \"q\", \"b\"].includes(key)) setActiveKey(key);\n    };\n    const handleKeyUp = () => setActiveKey(null);\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n  useEffect(() => {\n    if (!localHasData) return;\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 60\n    };\n    const width = 800;\n    const height = 400;\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    const xScale = d3.scaleTime().domain(d3.extent(data, d => d.Production_Date)).range([margin.left, width - margin.right]);\n    const maxYValue = d3.max(Object.keys(phaseData), phase => d3.max(phaseData[phase], d => d.value));\n    let yScale;\n    if (yScaleType === \"log\") {\n      yScale = d3.scaleLog().domain([1, maxYValue * yMultiplier]).range([height - margin.bottom, margin.top]);\n    } else {\n      yScale = d3.scaleLinear().domain([0, maxYValue * yMultiplier]).range([height - margin.bottom, margin.top]);\n    }\n    svg.append(\"g\").attr(\"transform\", `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\"))).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n    svg.append(\"g\").attr(\"transform\", `translate(${margin.left},0)`).call(yScaleType === \"log\" ? d3.axisLeft(yScale).ticks(5, \"~s\") : d3.axisLeft(yScale));\n\n    // Plot production data points.\n    Object.keys(phaseData).forEach(phase => {\n      svg.selectAll(`circle.${phase}`).data(phaseData[phase]).enter().append(\"circle\").attr(\"class\", phase).attr(\"cx\", d => xScale(new Date(firstDate.getTime() + d.t * 24 * 60 * 60 * 1000))).attr(\"cy\", d => yScale(d.value)).attr(\"r\", 3).attr(\"fill\", colors[phase] || \"#888888\");\n    });\n\n    // Draw historical decline and forecast curves for each phase.\n    Object.keys(phaseParams).forEach(phase => {\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase];\n\n      // Build historical decline data.\n      const histData = [];\n      const numPoints = 100;\n      for (let i = 0; i <= numPoints; i++) {\n        const t = tMax * i / numPoints;\n        const Q = b === 0 ? Qi * Math.exp(-D * t) : Qi / Math.pow(1 + b * D * t, 1 / b);\n        const date = new Date(firstDate.getTime() + t * 24 * 60 * 60 * 1000);\n        histData.push({\n          t,\n          Q,\n          Production_Date: date\n        });\n      }\n      const lineGenHist = d3.line().x(d => xScale(d.Production_Date)).y(d => yScale(d.Q));\n      svg.append(\"path\").datum(histData).attr(\"fill\", \"none\").attr(\"stroke\", colors[phase] || \"#888888\").attr(\"stroke-width\", 2).attr(\"d\", lineGenHist).style(\"cursor\", \"pointer\").call(d3.drag().on(\"drag\", function (event) {\n        let newParams = {\n          ...phaseParams[phase]\n        };\n        if (activeKey === \"d\") {\n          newParams.D = Math.max(0.0001, newParams.D + event.dy * 0.005);\n        } else if (activeKey === \"q\") {\n          newParams.Qi = Math.max(1, newParams.Qi - event.dy * 0.5);\n        } else if (activeKey === \"b\") {\n          newParams.b = Math.max(0.01, newParams.b + event.dx * 0.005);\n        }\n        setPhaseParams(prev => ({\n          ...prev,\n          [phase]: newParams\n        }));\n      }));\n\n      // Forecasting: Draw a forecast curve that starts at the last observed production date.\n      // Calculate the production rate at tMax as the starting value.\n      const forecastData = [];\n      const numForecastPoints = 100;\n      const forecastStartDate = maxProdDate; // Use the last production date from the historical data.\n      const Q_start = b === 0 ? Qi * Math.exp(-D * tMax) : Qi / Math.pow(1 + b * D * tMax, 1 / b);\n      for (let i = 0; i <= numForecastPoints; i++) {\n        // t here is the additional time beyond tMax.\n        const t = forecastDays * i / numForecastPoints;\n        // Forecast production continues using the same decline formula, starting from Q_start.\n        const Q = b === 0 ? Q_start * Math.exp(-D * t) : Q_start / Math.pow(1 + b * D * t, 1 / b);\n        // Add t days to the last production date.\n        const date = new Date(forecastStartDate.getTime() + t * 24 * 60 * 60 * 1000);\n        forecastData.push({\n          t: tMax + t,\n          Q,\n          Production_Date: date\n        });\n      }\n      const lineGenForecast = d3.line().x(d => xScale(d.Production_Date)).y(d => yScale(d.Q));\n      svg.append(\"path\").datum(forecastData).attr(\"fill\", \"none\").attr(\"stroke\", lightenColor(colors[phase] || \"#888888\", 1.2)).attr(\"stroke-width\", 3).attr(\"d\", lineGenForecast);\n    });\n  }, [data, firstDate, tMax, phaseData, phaseParams, colors, activeKey, localHasData, yMultiplier, yScaleType, forecastDays]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Interactive Decline Curve Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: 800,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [Object.keys(phaseParams).map(phase => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: phase.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), \": Qi = \", phaseParams[phase].Qi.toFixed(2), \", b = \", phaseParams[phase].b.toFixed(3), \", D = \", phaseParams[phase].D.toFixed(4)]\n      }, phase, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Drag Instructions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 48\n          }, this), \"Hold \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 18\n          }, this), \" to adjust decline constant (D),\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 68\n          }, this), \"Hold \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Q\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 18\n          }, this), \" to adjust initial rate (Qi),\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 65\n          }, this), \"Hold \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 18\n          }, this), \" to adjust decline exponent (b).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 68\n          }, this), \"(Forecast curve starts at the last historical production value.)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Axis Controls:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Y-Axis Scale Type:\\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"yScaleType\",\n                value: \"linear\",\n                checked: yScaleType === \"linear\",\n                onChange: () => setYScaleType(\"linear\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 17\n              }, this), \" Linear\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"yScaleType\",\n                value: \"log\",\n                checked: yScaleType === \"log\",\n                onChange: () => setYScaleType(\"log\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 17\n              }, this), \" Log\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Y-Axis Multiplier: \", yMultiplier.toFixed(2), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"1\",\n              max: \"3\",\n              step: \"0.05\",\n              value: yMultiplier,\n              onChange: e => setYMultiplier(+e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Forecast Extension (Days): \", forecastDays, /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"90\",\n              step: \"1\",\n              value: forecastDays,\n              onChange: e => setForecastDays(+e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Change Colors:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), Object.keys(colors).map(phase => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '5px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [phase.toUpperCase(), \" Color:\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              value: colors[phase],\n              onChange: e => setColors(prev => ({\n                ...prev,\n                [phase]: e.target.value\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)\n        }, phase, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveDCAChart, \"0njSWb8sYo+Wba1FGPtbsl9w0wI=\");\n_c = InteractiveDCAChart;\nexport default InteractiveDCAChart;\nvar _c;\n$RefreshReg$(_c, \"InteractiveDCAChart\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemo","d3","jsxDEV","_jsxDEV","darkenColor","hex","factor","c","color","r","Math","floor","g","b","formatHex","lightenColor","min","detectDateColumn","headers","candidates","filter","h","lower","toLowerCase","includes","length","detectColumns","phases","forEach","header","oil","water","gas","pressure","computeAverageFirstWeek","series","weekData","d","t","mean","value","fitD","fitData","Qi","bestD","bestError","Infinity","D","error","predicted","pow","InteractiveDCAChart","dataString","startDate","endDate","_s","parsedData","csvParse","err","console","hasData","svgRef","prodDateCol","columns","filteredData","dataWithDates","map","row","Date","isNaN","getTime","sd","ed","localHasData","firstDate","phasesDetected","data","date","Production_Date","phaseData","Object","keys","phase","tMax","max","maxProdDate","initialParams","fitSeries","defaultColors","phaseParams","setPhaseParams","colors","setColors","activeKey","setActiveKey","yScaleType","setYScaleType","yMultiplier","setYMultiplier","forecastDays","setForecastDays","handleKeyDown","e","key","handleKeyUp","window","addEventListener","removeEventListener","margin","top","right","bottom","left","width","height","svg","select","current","selectAll","remove","xScale","scaleTime","domain","extent","range","maxYValue","yScale","scaleLog","scaleLinear","append","attr","call","axisBottom","tickFormat","timeFormat","style","axisLeft","ticks","enter","histData","numPoints","i","Q","exp","push","lineGenHist","line","x","y","datum","drag","on","event","newParams","dy","dx","prev","forecastData","numForecastPoints","forecastStartDate","Q_start","lineGenForecast","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","marginTop","toUpperCase","toFixed","type","name","checked","onChange","step","target","marginBottom","_c","$RefreshReg$"],"sources":["C:/Users/lozan/Desktop/Git/dca-spotfire/frontend/src/InteractiveDCAChart.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n// Helper: Darken a HEX color by a given factor.\r\nconst darkenColor = (hex, factor = 0.8) => {\r\n  let c = d3.color(hex);\r\n  if (c) {\r\n    c.r = Math.floor(c.r * factor);\r\n    c.g = Math.floor(c.g * factor);\r\n    c.b = Math.floor(c.b * factor);\r\n    return c.formatHex();\r\n  }\r\n  return hex;\r\n};\r\n\r\n// Helper: Lighten a HEX color by a given factor.\r\nconst lightenColor = (hex, factor = 1.2) => {\r\n  let c = d3.color(hex);\r\n  if (c) {\r\n    c.r = Math.min(255, Math.floor(c.r * factor));\r\n    c.g = Math.min(255, Math.floor(c.g * factor));\r\n    c.b = Math.min(255, Math.floor(c.b * factor));\r\n    return c.formatHex();\r\n  }\r\n  return hex;\r\n};\r\n\r\n// Auto-detect the production date column from common names.\r\nconst detectDateColumn = (headers) => {\r\n  const candidates = headers.filter(h => {\r\n    const lower = h.toLowerCase();\r\n    return (lower.includes(\"prod\") && lower.includes(\"date\")) ||\r\n           lower.includes(\"proddt\") ||\r\n           lower.includes(\"proddttm\") ||\r\n           lower === \"date\" ||\r\n           lower === \"datetime\";\r\n  });\r\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\r\n};\r\n\r\n// Auto-detect measurement columns using keywords.\r\nconst detectColumns = (headers) => {\r\n  let phases = {};\r\n  headers.forEach(header => {\r\n    const lower = header.toLowerCase();\r\n    // For oil: prefer \"bopd\", otherwise any \"oil\".\r\n    if (lower.includes(\"bopd\")) {\r\n      phases.oil = header;\r\n    } else if (lower.includes(\"oil\") && !phases.oil) {\r\n      phases.oil = header;\r\n    }\r\n    // For water: prefer \"bwpd\", otherwise any \"water\".\r\n    if (lower.includes(\"bwpd\")) {\r\n      phases.water = header;\r\n    } else if (lower.includes(\"water\") && !phases.water) {\r\n      phases.water = header;\r\n    }\r\n    // For gas: prefer \"mcfd\", otherwise any \"gas\".\r\n    if (lower.includes(\"mcfd\")) {\r\n      phases.gas = header;\r\n    } else if (lower.includes(\"gas\") && !phases.gas) {\r\n      phases.gas = header;\r\n    }\r\n    // For pressure: look for \"pip\", \"pressure\", or \"psi\".\r\n    if ((lower.includes(\"pip\") || lower.includes(\"pressure\") || lower.includes(\"psi\")) && !phases.pressure) {\r\n      phases.pressure = header;\r\n    }\r\n  });\r\n  return phases;\r\n};\r\n\r\n// Compute the average production over the first week (t <= 7 days)\r\n// Fallback: if no week data exists, use the first data point.\r\nconst computeAverageFirstWeek = (series) => {\r\n  const weekData = series.filter(d => d.t <= 7);\r\n  return weekData.length > 0 ? d3.mean(weekData, d => d.value) : (series[0] ? series[0].value : 0);\r\n};\r\n\r\n// Brute-force search for best-fit D using the last 60 days.\r\nconst fitD = (fitData, Qi, b) => {\r\n  let bestD = 0.01;\r\n  let bestError = Infinity;\r\n  for (let D = 0.001; D <= 0.1; D += 0.001) {\r\n    let error = 0;\r\n    fitData.forEach(d => {\r\n      const predicted = Qi / Math.pow(1 + b * D * d.t, 1 / b);\r\n      error += Math.pow(predicted - d.value, 2);\r\n    });\r\n    if (error < bestError) {\r\n      bestError = error;\r\n      bestD = D;\r\n    }\r\n  }\r\n  return bestD;\r\n};\r\n\r\nconst InteractiveDCAChart = ({ dataString, startDate, endDate }) => {\r\n  // Parse CSV data.\r\n  const parsedData = useMemo(() => {\r\n    try {\r\n      return d3.csvParse(dataString);\r\n    } catch (err) {\r\n      console.error(\"Error parsing CSV:\", err);\r\n      return [];\r\n    }\r\n  }, [dataString]);\r\n\r\n  const hasData = parsedData && parsedData.length > 0;\r\n  const svgRef = useRef(null);\r\n  const prodDateCol = hasData ? detectDateColumn(parsedData.columns) : \"Production_Date\";\r\n\r\n  // Filter data by date.\r\n  const filteredData = useMemo(() => {\r\n    if (!hasData) return [];\r\n    let dataWithDates = parsedData.map(row => ({\r\n      ...row,\r\n      [prodDateCol]: new Date(row[prodDateCol])\r\n    }));\r\n    dataWithDates = dataWithDates.filter(row => {\r\n      const d = new Date(row[prodDateCol]);\r\n      return !isNaN(d.getTime());\r\n    });\r\n    if (startDate) {\r\n      const sd = new Date(startDate);\r\n      dataWithDates = dataWithDates.filter(row => row[prodDateCol] >= sd);\r\n    }\r\n    if (endDate) {\r\n      const ed = new Date(endDate);\r\n      dataWithDates = dataWithDates.filter(row => row[prodDateCol] <= ed);\r\n    }\r\n    return dataWithDates;\r\n  }, [parsedData, startDate, endDate, hasData, prodDateCol]);\r\n\r\n  const localHasData = filteredData && filteredData.length > 0;\r\n  const firstDate = localHasData ? new Date(filteredData[0][prodDateCol]) : new Date();\r\n  const headers = parsedData.columns ? parsedData.columns : [];\r\n  const phasesDetected = detectColumns(headers);\r\n\r\n  const data = localHasData\r\n    ? filteredData.map(row => {\r\n        const date = new Date(row[prodDateCol]);\r\n        return { ...row, Production_Date: date, t: (date - firstDate) / (1000 * 60 * 60 * 24) };\r\n      })\r\n    : [];\r\n\r\n  const phaseData = {};\r\n  Object.keys(phasesDetected).forEach(phase => {\r\n    phaseData[phase] = localHasData\r\n      ? data.map(d => ({ t: d.t, value: +d[phasesDetected[phase]] }))\r\n      : [];\r\n  });\r\n\r\n  // tMax: Maximum historical time (in days)\r\n  const tMax = localHasData ? d3.max(data, d => d.t) : 0;\r\n  // maxProdDate: Latest production date from the data.\r\n  const maxProdDate = localHasData ? d3.max(data, d => d.Production_Date) : firstDate;\r\n  \r\n  // For historical curves, use initial Qi from the first data point.\r\n  const initialParams = {};\r\n  if (localHasData) {\r\n    Object.keys(phaseData).forEach(phase => {\r\n      const series = phaseData[phase];\r\n      const Qi = series[0] ? series[0].value : 0;\r\n      const b = 0.9;\r\n      const fitSeries = series.filter(d => d.t >= (tMax >= 60 ? tMax - 60 : 0));\r\n      const D = fitSeries.length > 0 ? fitD(fitSeries, Qi, b) : 0.01;\r\n      initialParams[phase] = { Qi, b, D };\r\n    });\r\n  }\r\n\r\n  const defaultColors = { oil: \"#008000\", water: \"#0000ff\", gas: \"#ff0000\", pressure: \"#000000\" };\r\n\r\n  const [phaseParams, setPhaseParams] = useState(initialParams);\r\n  const [colors, setColors] = useState(defaultColors);\r\n  const [activeKey, setActiveKey] = useState(null);\r\n  const [yScaleType, setYScaleType] = useState(\"linear\");\r\n  const [yMultiplier, setYMultiplier] = useState(1.1);\r\n  const [forecastDays, setForecastDays] = useState(30);\r\n\r\n  // Global key listeners for hot keys (\"d\", \"q\", \"b\").\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      if ([\"d\", \"q\", \"b\"].includes(key)) setActiveKey(key);\r\n    };\r\n    const handleKeyUp = () => setActiveKey(null);\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    window.addEventListener(\"keyup\", handleKeyUp);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n      window.removeEventListener(\"keyup\", handleKeyUp);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!localHasData) return;\r\n    const margin = { top: 20, right: 30, bottom: 40, left: 60 };\r\n    const width = 800;\r\n    const height = 400;\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const xScale = d3.scaleTime()\r\n      .domain(d3.extent(data, d => d.Production_Date))\r\n      .range([margin.left, width - margin.right]);\r\n\r\n    const maxYValue = d3.max(Object.keys(phaseData), phase =>\r\n      d3.max(phaseData[phase], d => d.value)\r\n    );\r\n    let yScale;\r\n    if (yScaleType === \"log\") {\r\n      yScale = d3.scaleLog().domain([1, maxYValue * yMultiplier]).range([height - margin.bottom, margin.top]);\r\n    } else {\r\n      yScale = d3.scaleLinear().domain([0, maxYValue * yMultiplier]).range([height - margin.bottom, margin.top]);\r\n    }\r\n\r\n    svg.append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\")))\r\n      .selectAll(\"text\")\r\n      .attr(\"transform\", \"rotate(-45)\")\r\n      .style(\"text-anchor\", \"end\");\r\n\r\n    svg.append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(yScaleType === \"log\" ? d3.axisLeft(yScale).ticks(5, \"~s\") : d3.axisLeft(yScale));\r\n\r\n    // Plot production data points.\r\n    Object.keys(phaseData).forEach(phase => {\r\n      svg.selectAll(`circle.${phase}`)\r\n        .data(phaseData[phase])\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", phase)\r\n        .attr(\"cx\", d => xScale(new Date(firstDate.getTime() + d.t * 24 * 60 * 60 * 1000)))\r\n        .attr(\"cy\", d => yScale(d.value))\r\n        .attr(\"r\", 3)\r\n        .attr(\"fill\", colors[phase] || \"#888888\");\r\n    });\r\n\r\n    // Draw historical decline and forecast curves for each phase.\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      const { Qi, b, D } = phaseParams[phase];\r\n\r\n      // Build historical decline data.\r\n      const histData = [];\r\n      const numPoints = 100;\r\n      for (let i = 0; i <= numPoints; i++) {\r\n        const t = (tMax * i) / numPoints;\r\n        const Q = (b === 0)\r\n          ? Qi * Math.exp(-D * t)\r\n          : Qi / Math.pow(1 + b * D * t, 1 / b);\r\n        const date = new Date(firstDate.getTime() + t * 24 * 60 * 60 * 1000);\r\n        histData.push({ t, Q, Production_Date: date });\r\n      }\r\n      const lineGenHist = d3.line()\r\n        .x(d => xScale(d.Production_Date))\r\n        .y(d => yScale(d.Q));\r\n      svg.append(\"path\")\r\n        .datum(histData)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", colors[phase] || \"#888888\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"d\", lineGenHist)\r\n        .style(\"cursor\", \"pointer\")\r\n        .call(d3.drag()\r\n          .on(\"drag\", function(event) {\r\n            let newParams = { ...phaseParams[phase] };\r\n            if (activeKey === \"d\") {\r\n              newParams.D = Math.max(0.0001, newParams.D + event.dy * 0.005);\r\n            } else if (activeKey === \"q\") {\r\n              newParams.Qi = Math.max(1, newParams.Qi - event.dy * 0.5);\r\n            } else if (activeKey === \"b\") {\r\n              newParams.b = Math.max(0.01, newParams.b + event.dx * 0.005);\r\n            }\r\n            setPhaseParams(prev => ({ ...prev, [phase]: newParams }));\r\n          })\r\n        );\r\n      \r\n      // Forecasting: Draw a forecast curve that starts at the last observed production date.\r\n      // Calculate the production rate at tMax as the starting value.\r\n      const forecastData = [];\r\n      const numForecastPoints = 100;\r\n      const forecastStartDate = maxProdDate; // Use the last production date from the historical data.\r\n      const Q_start = (b === 0)\r\n        ? Qi * Math.exp(-D * tMax)\r\n        : Qi / Math.pow(1 + b * D * tMax, 1 / b);\r\n      for (let i = 0; i <= numForecastPoints; i++) {\r\n        // t here is the additional time beyond tMax.\r\n        const t = (forecastDays * i) / numForecastPoints;\r\n        // Forecast production continues using the same decline formula, starting from Q_start.\r\n        const Q = (b === 0)\r\n          ? Q_start * Math.exp(-D * t)\r\n          : Q_start / Math.pow(1 + b * D * t, 1 / b);\r\n        // Add t days to the last production date.\r\n        const date = new Date(forecastStartDate.getTime() + t * 24 * 60 * 60 * 1000);\r\n        forecastData.push({ t: tMax + t, Q, Production_Date: date });\r\n      }\r\n      const lineGenForecast = d3.line()\r\n        .x(d => xScale(d.Production_Date))\r\n        .y(d => yScale(d.Q));\r\n      svg.append(\"path\")\r\n        .datum(forecastData)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", lightenColor(colors[phase] || \"#888888\", 1.2))\r\n        .attr(\"stroke-width\", 3)\r\n        .attr(\"d\", lineGenForecast);\r\n    });\r\n  }, [data, firstDate, tMax, phaseData, phaseParams, colors, activeKey, localHasData, yMultiplier, yScaleType, forecastDays]);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Interactive Decline Curve Forecast</h3>\r\n      <svg ref={svgRef} width={800} height={400}></svg>\r\n      <div style={{ marginTop: '10px' }}>\r\n        {Object.keys(phaseParams).map(phase => (\r\n          <div key={phase}>\r\n            <strong>{phase.toUpperCase()}</strong>: Qi = {phaseParams[phase].Qi.toFixed(2)}, b = {phaseParams[phase].b.toFixed(3)}, D = {phaseParams[phase].D.toFixed(4)}\r\n          </div>\r\n        ))}\r\n        <div style={{ marginTop: '10px' }}>\r\n          <p>\r\n            <strong>Drag Instructions:</strong><br />\r\n            Hold <strong>D</strong> to adjust decline constant (D),<br />\r\n            Hold <strong>Q</strong> to adjust initial rate (Qi),<br />\r\n            Hold <strong>B</strong> to adjust decline exponent (b).<br />\r\n            (Forecast curve starts at the last historical production value.)\r\n          </p>\r\n        </div>\r\n        <div style={{ marginTop: '10px' }}>\r\n          <h4>Axis Controls:</h4>\r\n          <div>\r\n            <label>\r\n              Y-Axis Scale Type:&nbsp;\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"yScaleType\"\r\n                  value=\"linear\"\r\n                  checked={yScaleType === \"linear\"}\r\n                  onChange={() => setYScaleType(\"linear\")}\r\n                /> Linear\r\n              </label>\r\n              &nbsp;\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"yScaleType\"\r\n                  value=\"log\"\r\n                  checked={yScaleType === \"log\"}\r\n                  onChange={() => setYScaleType(\"log\")}\r\n                /> Log\r\n              </label>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              Y-Axis Multiplier: {yMultiplier.toFixed(2)}\r\n              <input\r\n                type=\"range\"\r\n                min=\"1\"\r\n                max=\"3\"\r\n                step=\"0.05\"\r\n                value={yMultiplier}\r\n                onChange={(e) => setYMultiplier(+e.target.value)}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              Forecast Extension (Days): {forecastDays}\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"90\"\r\n                step=\"1\"\r\n                value={forecastDays}\r\n                onChange={(e) => setForecastDays(+e.target.value)}\r\n              />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div style={{ marginTop: '10px' }}>\r\n          <h4>Change Colors:</h4>\r\n          {Object.keys(colors).map(phase => (\r\n            <div key={phase} style={{ marginBottom: '5px' }}>\r\n              <label>\r\n                {phase.toUpperCase()} Color:&nbsp;\r\n                <input\r\n                  type=\"color\"\r\n                  value={colors[phase]}\r\n                  onChange={(e) => setColors(prev => ({ ...prev, [phase]: e.target.value }))}\r\n                />\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveDCAChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}