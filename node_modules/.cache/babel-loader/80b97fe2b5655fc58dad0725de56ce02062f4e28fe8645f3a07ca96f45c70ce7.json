{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lozan\\\\Desktop\\\\Git\\\\dca-spotfire\\\\frontend\\\\src\\\\InteractiveDCAChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateRate = (Qi, b, D, t) => {\n  if (b === 0) {\n    return Qi * Math.exp(-D * t);\n  }\n  return Qi / Math.pow(1 + b * D * t, 1 / b);\n};\nconst fitDeclineParameters = (data, fitWindow = 60) => {\n  var _data$;\n  if (!data || data.length < 3) return {\n    Qi: (data === null || data === void 0 ? void 0 : (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.value) || 100,\n    b: 0.9,\n    D: 0.01\n  };\n  const sorted = data.slice().sort((a, b) => a.t - b.t);\n  const Qi = sorted[0].value;\n  const recent = sorted.slice(-Math.min(fitWindow, sorted.length));\n  let bestParams = {\n      b: 0,\n      D: 0.01\n    },\n    bestError = Infinity;\n\n  // Coarse search for b\n  for (let b = 0; b <= 1; b += 0.1) {\n    const {\n      D,\n      error\n    } = findOptimalD(recent, Qi, b);\n    if (error < bestError) {\n      bestError = error;\n      bestParams = {\n        b,\n        D\n      };\n    }\n  }\n  // Refine b\n  const bmin = Math.max(0, bestParams.b - 0.1);\n  const bmax = Math.min(1, bestParams.b + 0.1);\n  for (let b = bmin; b <= bmax; b += 0.01) {\n    const {\n      D,\n      error\n    } = findOptimalD(recent, Qi, b);\n    if (error < bestError) {\n      bestError = error;\n      bestParams = {\n        b,\n        D\n      };\n    }\n  }\n  return {\n    Qi,\n    b: bestParams.b,\n    D: bestParams.D\n  };\n};\nfunction findOptimalD(recentData, Qi, b) {\n  let bestD = 0.01,\n    bestError = Infinity;\n  for (let D = 0.001; D <= 0.5; D += 0.005) {\n    let err = 0;\n    for (const d of recentData) {\n      const pred = calculateRate(Qi, b, D, d.t);\n      err += (pred - d.value) ** 2;\n    }\n    if (err < bestError) {\n      bestError = err;\n      bestD = D;\n    }\n  }\n  // Refine around bestD\n  const Dmin = Math.max(0.001, bestD - 0.005);\n  const Dmax = bestD + 0.005;\n  for (let D = Dmin; D <= Dmax; D += 0.0005) {\n    let err = 0;\n    for (const d of recentData) {\n      const pred = calculateRate(Qi, b, D, d.t);\n      err += (pred - d.value) ** 2;\n    }\n    if (err < bestError) {\n      bestError = err;\n      bestD = D;\n    }\n  }\n  return {\n    D: bestD,\n    error: bestError\n  };\n}\n\n// Helper functions moved out to avoid re-declaration in component\nfunction detectDateColumn(columns) {\n  const candidates = columns.filter(h => {\n    const lower = h.toLowerCase();\n    return lower.includes(\"prod\") && lower.includes(\"date\") || lower.includes(\"proddt\") || lower.includes(\"proddttm\") || lower === \"date\" || lower === \"datetime\";\n  });\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\n}\nfunction detectColumns(columns) {\n  let phases = {};\n  columns.forEach(header => {\n    const lower = header.toLowerCase();\n    if (lower.includes(\"bopd\") || lower.includes(\"oil\") && !phases.oil) {\n      phases.oil = header;\n    }\n    if (lower.includes(\"bwpd\") || lower.includes(\"water\") && !phases.water) {\n      phases.water = header;\n    }\n    if (lower.includes(\"mcfd\") || lower.includes(\"gas\") && !phases.gas) {\n      phases.gas = header;\n    }\n    if ((lower.includes(\"pip\") || lower.includes(\"pressure\") || lower.includes(\"psi\")) && !phases.pressure) {\n      phases.pressure = header;\n    }\n  });\n  return phases;\n}\nexport default function InteractiveDCAChart({\n  dataString,\n  startDate,\n  endDate,\n  colors,\n  yScaleType,\n  yMultiplier,\n  // Always 1 from parent.\n  forecastDays,\n  autoForecast = true,\n  onParametersCalculated\n}) {\n  _s();\n  const svgRef = useRef(null);\n  const xScaleRef = useRef(null);\n  const yScaleRef = useRef(null); // Store the current y scale\n  const yAxisRef = useRef(null); // Store the y-axis group element\n\n  // Store previous parameter values to prevent redundant updates\n  const prevParamsRef = useRef({});\n  const lastOnParamsCallRef = useRef(null);\n\n  // For tooltip: store hover info.\n  const [hoverInfo, setHoverInfo] = useState(null);\n  // Store current zoom transform for proper axis updates\n  const [zoomTransform, setZoomTransform] = useState(null);\n\n  // Parse CSV data.\n  const parsedData = useMemo(() => {\n    try {\n      return d3.csvParse(dataString);\n    } catch (err) {\n      console.error(\"Error parsing CSV:\", err);\n      return [];\n    }\n  }, [dataString]);\n  const hasData = parsedData.length > 0;\n  const prodDateCol = useMemo(() => hasData ? detectDateColumn(parsedData.columns) : \"Production_Date\", [hasData, parsedData]);\n  const phasesDetected = useMemo(() => hasData ? detectColumns(parsedData.columns) : {}, [hasData, parsedData]);\n  const filteredData = useMemo(() => {\n    if (!hasData) return [];\n    let arr = parsedData.map(row => ({\n      ...row,\n      [prodDateCol]: new Date(row[prodDateCol])\n    })).filter(row => !isNaN(row[prodDateCol].getTime()));\n    arr.sort((a, b) => a[prodDateCol] - b[prodDateCol]);\n    if (startDate) {\n      const sd = new Date(startDate);\n      arr = arr.filter(row => row[prodDateCol] >= sd);\n    }\n    if (endDate) {\n      const ed = new Date(endDate);\n      arr = arr.filter(row => row[prodDateCol] <= ed);\n    }\n    return arr;\n  }, [parsedData, prodDateCol, startDate, endDate, hasData]);\n  const localHasData = filteredData.length > 0;\n  const firstDate = useMemo(() => localHasData ? filteredData[0][prodDateCol] : new Date(), [localHasData, filteredData, prodDateCol]);\n  const data = useMemo(() => {\n    if (!localHasData) return [];\n    return filteredData.map(row => {\n      const date = row[prodDateCol];\n      return {\n        ...row,\n        t: (date - firstDate) / (1000 * 60 * 60 * 24)\n      };\n    });\n  }, [filteredData, localHasData, firstDate, prodDateCol]);\n  const phaseData = useMemo(() => {\n    let result = {};\n    Object.keys(phasesDetected).forEach(phase => {\n      result[phase] = data.map(d => ({\n        t: d.t,\n        value: +d[phasesDetected[phase]]\n      })).filter(d => !isNaN(d.value));\n    });\n    return result;\n  }, [data, phasesDetected]);\n  const tMax = useMemo(() => localHasData ? d3.max(data, d => d.t) : 0, [data, localHasData]);\n  const lastProdDate = useMemo(() => localHasData ? d3.max(data, d => d[prodDateCol]) : new Date(), [data, localHasData, prodDateCol]);\n  const [phaseParams, setPhaseParams] = useState({});\n  const [autoFitEnabled, setAutoFitEnabled] = useState(true);\n  const [activeKey, setActiveKey] = useState(null);\n\n  // Key events for adjusting parameters.\n  useEffect(() => {\n    const handleKeyDown = e => {\n      const key = e.key.toLowerCase();\n      if ([\"d\", \"q\", \"b\"].includes(key)) setActiveKey(key);\n    };\n    const handleKeyUp = () => setActiveKey(null);\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n\n  // Auto-fit decline parameters with memoized input dependencies\n  useEffect(() => {\n    if (!localHasData) return;\n    let newParams = {};\n    Object.keys(phaseData).forEach(phase => {\n      const arr = phaseData[phase];\n      if (arr.length < 3) {\n        var _arr$;\n        newParams[phase] = {\n          Qi: (arr === null || arr === void 0 ? void 0 : (_arr$ = arr[0]) === null || _arr$ === void 0 ? void 0 : _arr$.value) || 100,\n          b: 0.9,\n          D: 0.01\n        };\n      } else {\n        newParams[phase] = fitDeclineParameters(arr);\n      }\n    });\n\n    // Only update state if parameters have actually changed and autofit is enabled\n    if (autoFitEnabled && JSON.stringify(newParams) !== JSON.stringify(prevParamsRef.current)) {\n      prevParamsRef.current = newParams;\n      setPhaseParams(newParams);\n    }\n  }, [phaseData, localHasData, autoFitEnabled]);\n  const calculatedEUR = useMemo(() => {\n    let results = {};\n    Object.keys(phaseParams).forEach(phase => {\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase];\n      if (b === 0) results[phase] = Qi / D;else if (b > 0 && b < 1) results[phase] = Qi / (D * (1 - b));else if (b === 1) results[phase] = Qi * 10000;else results[phase] = \"N/A\";\n    });\n    return results;\n  }, [phaseParams]);\n\n  // Compute forecast average for first 60 days.\n  const forecastAverage = useMemo(() => {\n    let fa = {};\n    Object.keys(phaseParams).forEach(phase => {\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase];\n      const Q_start = calculateRate(Qi, b, D, tMax);\n      const steps = 60;\n      let sum = 0;\n      for (let i = 0; i <= steps; i++) {\n        const t = i / steps * 60;\n        const Q = b === 0 ? Q_start * Math.exp(-D * t) : Q_start / Math.pow(1 + b * D * t, 1 / b);\n        sum += Q;\n      }\n      fa[phase] = sum / (steps + 1);\n    });\n    return fa;\n  }, [phaseParams, tMax]);\n\n  // FIX: Use useEffect with proper comparison to prevent infinite loops\n  useEffect(() => {\n    if (onParametersCalculated) {\n      const newParams = {\n        phaseParams,\n        calculatedEUR,\n        forecastAverage\n      };\n      const stringifiedNew = JSON.stringify(newParams);\n      const stringifiedPrev = JSON.stringify(lastOnParamsCallRef.current);\n\n      // Only call the callback if parameters have actually changed\n      if (stringifiedNew !== stringifiedPrev) {\n        lastOnParamsCallRef.current = newParams;\n        onParametersCalculated(newParams);\n      }\n    }\n  }, [phaseParams, calculatedEUR, forecastAverage, onParametersCalculated]);\n  const allHistoricalPoints = useMemo(() => {\n    let out = [];\n    Object.keys(phaseData).forEach(phase => {\n      phaseData[phase].forEach(d => {\n        out.push({\n          date: new Date(firstDate.getTime() + d.t * 86400000),\n          Q: d.value,\n          phase\n        });\n      });\n    });\n    return out;\n  }, [phaseData, firstDate]);\n  function calcForecast(Qi, b, D, tMaxVal, days) {\n    let Qstart = calculateRate(Qi, b, D, tMaxVal);\n    let arr = [];\n    const steps = 50;\n    for (let i = 0; i <= steps; i++) {\n      const dtFraction = i / steps * days;\n      const q = b === 0 ? Qstart * Math.exp(-D * dtFraction) : Qstart / Math.pow(1 + b * D * dtFraction, 1 / b);\n      const dt = new Date(lastProdDate.getTime() + dtFraction * 86400000);\n      arr.push({\n        date: dt,\n        Q: q\n      });\n    }\n    return arr;\n  }\n  const allForecastPoints = useMemo(() => {\n    let out = {};\n    Object.keys(phaseParams).forEach(phase => {\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase];\n      if (!Qi || D <= 0) {\n        out[phase] = [];\n      } else {\n        out[phase] = calcForecast(Qi, b, D, tMax, forecastDays).map(obj => ({\n          ...obj,\n          phase\n        }));\n      }\n    });\n    return out;\n  }, [phaseParams, tMax, forecastDays, lastProdDate]);\n  const combinedAll = useMemo(() => {\n    let arr = [...allHistoricalPoints];\n    Object.values(allForecastPoints).forEach(a => arr = arr.concat(a));\n    return arr;\n  }, [allHistoricalPoints, allForecastPoints]);\n\n  // Helper function to update chart elements with a transformed y scale\n  const updateChartElements = newYScale => {\n    // Store the new scale for tooltip use\n    yScaleRef.current = newYScale;\n\n    // Get the SVG container\n    const svg = d3.select(svgRef.current);\n\n    // Update y-axis with new scale\n    if (yAxisRef.current) {\n      const yAxis = yScaleType === \"log\" ? d3.axisLeft(newYScale).ticks(6, \"~s\") : d3.axisLeft(newYScale);\n      d3.select(yAxisRef.current).call(yAxis);\n    }\n\n    // Update circles (historical data points)\n    svg.selectAll(\"circle\").attr(\"cy\", d => {\n      const y = newYScale(d.Q);\n      return isNaN(y) ? 0 : y;\n    });\n\n    // Update all paths (decline curves and forecasts)\n    svg.selectAll(\"path\").each(function (d) {\n      if (Array.isArray(d)) {\n        const xScale = xScaleRef.current;\n        if (!xScale) return;\n        const newLineGen = d3.line().x(dd => {\n          const x = xScale(dd.date);\n          return isNaN(x) ? 0 : x;\n        }).y(dd => {\n          const y = newYScale(dd.Q);\n          return isNaN(y) ? 0 : y;\n        }).curve(d3.curveMonotoneX);\n        d3.select(this).attr(\"d\", newLineGen(d));\n      }\n    });\n  };\n\n  // D3 rendering with careful dependency tracking\n  useEffect(() => {\n    if (!localHasData) return;\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 60\n    };\n    const width = 800;\n    const height = 400;\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    // Handle possible empty arrays with sensible defaults\n    const dateExtent = d3.extent(combinedAll, d => d.date);\n    const minDateDomain = dateExtent[0] || new Date();\n    const maxDateDomain = dateExtent[1] || new Date();\n    const qExtent = d3.extent(combinedAll, d => d.Q);\n    let minQ = qExtent[0] || 0;\n    let maxQ = qExtent[1] || 100;\n    if (yScaleType === \"log\" && minQ <= 0) minQ = 1e-2;\n    const xScale = d3.scaleTime().domain([minDateDomain, maxDateDomain]).range([margin.left, width - margin.right]);\n    xScaleRef.current = xScale;\n    const yDomain = yScaleType === \"log\" ? [Math.max(1e-5, minQ), maxQ] : [0, maxQ];\n    const yScale = yScaleType === \"log\" ? d3.scaleLog().domain(yDomain).range([height - margin.bottom, margin.top]) : d3.scaleLinear().domain(yDomain).range([height - margin.bottom, margin.top]);\n    yScaleRef.current = yScale;\n    const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\n    const yAxis = yScaleType === \"log\" ? d3.axisLeft(yScale).ticks(6, \"~s\") : d3.axisLeft(yScale);\n    svg.append(\"g\").attr(\"transform\", `translate(0,${height - margin.bottom})`).call(xAxis).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n\n    // Store a reference to the y-axis for updates during interaction\n    const yAxisG = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},0)`).call(yAxis);\n    yAxisRef.current = yAxisG.node();\n    svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", height - 5).style(\"text-anchor\", \"middle\").text(\"Date\");\n    svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"x\", -height / 2).attr(\"y\", 15).style(\"text-anchor\", \"middle\").text(\"Production Rate\");\n\n    // Plot historical points with NaN safety checks\n    Object.keys(phasesDetected).forEach(phase => {\n      const pts = allHistoricalPoints.filter(o => o.phase === phase);\n      svg.selectAll(`circle.hist-${phase}`).data(pts).enter().append(\"circle\").attr(\"class\", `hist-${phase}`).attr(\"cx\", d => {\n        const x = xScale(d.date);\n        return isNaN(x) ? margin.left : x; // Prevent NaN\n      }).attr(\"cy\", d => {\n        const y = yScale(d.Q);\n        return isNaN(y) ? height - margin.bottom : y; // Prevent NaN\n      }).attr(\"r\", 3).attr(\"fill\", colors[phase] || \"#888\");\n    });\n\n    // Plot decline lines with drag behavior.\n    Object.keys(phaseParams).forEach(phase => {\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase];\n      const lineData = [];\n      const steps = 100;\n      for (let i = 0; i <= steps; i++) {\n        const frac = i / steps;\n        const tVal = tMax * frac;\n        const QVal = calculateRate(Qi, b, D, tVal);\n        const dt = new Date(firstDate.getTime() + tVal * 86400000);\n        lineData.push({\n          date: dt,\n          Q: QVal\n        });\n      }\n\n      // Only draw the line if we have valid data\n      if (lineData.length > 1) {\n        const lineGen = d3.line().x(d => {\n          const x = xScale(d.date);\n          return isNaN(x) ? 0 : x; // Prevent NaN\n        }).y(d => {\n          const y = yScale(d.Q);\n          return isNaN(y) ? 0 : y; // Prevent NaN\n        }).curve(d3.curveMonotoneX);\n        svg.append(\"path\").datum(lineData).attr(\"fill\", \"none\").attr(\"stroke\", colors[phase] || \"#888888\").attr(\"stroke-width\", 2).style(\"cursor\", \"pointer\").attr(\"d\", lineGen).call(d3.drag().on(\"drag\", event => {\n          if (autoFitEnabled) setAutoFitEnabled(false);\n          setPhaseParams(prev => {\n            const copy = {\n              ...prev\n            };\n            const curr = {\n              ...copy[phase]\n            };\n            if (activeKey === \"d\") {\n              curr.D = Math.max(0.0001, curr.D + event.dy * 0.001);\n            } else if (activeKey === \"q\") {\n              curr.Qi = Math.max(1, curr.Qi - event.dy);\n            } else if (activeKey === \"b\") {\n              curr.b = Math.max(0, Math.min(1, curr.b + event.dy * 0.005));\n            }\n            copy[phase] = curr;\n\n            // Update the chart in real-time during drag\n            setTimeout(() => {\n              // Use the current yScale (may be transformed by zoom)\n              const currentYScale = yScaleRef.current;\n              if (currentYScale) updateChartElements(currentYScale);\n            }, 0);\n            return copy;\n          });\n        }));\n      }\n    });\n\n    // Plot forecast lines with hover/drag effects.\n    Object.keys(allForecastPoints).forEach(phase => {\n      const fc = allForecastPoints[phase];\n      if (fc.length > 1) {\n        const lineGenFc = d3.line().x(d => {\n          const x = xScale(d.date);\n          return isNaN(x) ? 0 : x;\n        }).y(d => {\n          const y = yScale(d.Q);\n          return isNaN(y) ? 0 : y;\n        }).curve(d3.curveMonotoneX);\n        svg.append(\"path\").datum(fc).attr(\"fill\", \"none\").attr(\"stroke\", d3.color(colors[phase] || \"#888\").brighter(1.2)).attr(\"stroke-width\", 3).attr(\"stroke-dasharray\", \"5,3\").attr(\"d\", lineGenFc).on(\"mouseover\", function () {\n          d3.select(this).attr(\"stroke-width\", 5);\n        }).on(\"mouseout\", function () {\n          d3.select(this).attr(\"stroke-width\", 3);\n        }).on(\"mousedown\", function () {\n          d3.select(this).style(\"cursor\", \"grabbing\");\n        }).on(\"mouseup\", function () {\n          d3.select(this).style(\"cursor\", \"grab\");\n        });\n      }\n    });\n    svg.append(\"line\").attr(\"x1\", xScale(lastProdDate)).attr(\"y1\", margin.top).attr(\"x2\", xScale(lastProdDate)).attr(\"y2\", height - margin.bottom).attr(\"stroke\", \"#666\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"5,5\");\n    svg.append(\"text\").attr(\"x\", xScale(lastProdDate) + 5).attr(\"y\", margin.top + 15).attr(\"fill\", \"#666\").text(\"Forecast →\");\n\n    // d3-zoom for vertical scaling with proper axis updates\n    const zoomBehavior = d3.zoom().scaleExtent([0.5, 10]).on(\"zoom\", event => {\n      setZoomTransform(event.transform);\n\n      // Create the transformed y scale\n      const newYScale = event.transform.rescaleY(yScale);\n\n      // Update all chart elements\n      updateChartElements(newYScale);\n    });\n    svg.call(zoomBehavior);\n\n    // If we have a stored zoom transform, apply it\n    if (zoomTransform) {\n      svg.call(zoomBehavior.transform, zoomTransform);\n    }\n  }, [localHasData, combinedAll, firstDate, lastProdDate, yScaleType, forecastDays, autoFitEnabled, tMax, activeKey, phaseParams, colors, phasesDetected, allHistoricalPoints, allForecastPoints]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: 800,\n      height: 400,\n      onMouseMove: event => {\n        if (!localHasData || !xScaleRef.current) return;\n        const [mouseX] = d3.pointer(event, svgRef.current);\n        const date = xScaleRef.current.invert(mouseX);\n        const t = (date - firstDate) / 86400000;\n        let vals = {};\n        Object.keys(phaseParams).forEach(phase => {\n          const {\n            Qi,\n            b,\n            D\n          } = phaseParams[phase] || {};\n          if (Qi && b !== undefined && D) {\n            vals[phase] = calculateRate(Qi, b, D, t);\n          }\n        });\n        setHoverInfo({\n          x: mouseX,\n          date,\n          values: vals\n        });\n      },\n      onMouseOut: () => setHoverInfo(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 7\n    }, this), hoverInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        left: hoverInfo.x + 5,\n        top: 0,\n        pointerEvents: 'none',\n        background: 'rgba(255,255,255,0.9)',\n        border: '1px solid #ccc',\n        padding: 5,\n        fontSize: 12,\n        borderRadius: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: hoverInfo.date.toDateString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 11\n      }, this), Object.keys(hoverInfo.values).map(ph => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [ph.toUpperCase(), \": \", hoverInfo.values[ph].toFixed(2)]\n      }, ph, true, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 614,\n    columnNumber: 5\n  }, this);\n}\n_s(InteractiveDCAChart, \"7QdZv+Qq5mc+Msj9kdtVyQhJZ0g=\");\n_c = InteractiveDCAChart;\nvar _c;\n$RefreshReg$(_c, \"InteractiveDCAChart\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemo","d3","jsxDEV","_jsxDEV","calculateRate","Qi","b","D","t","Math","exp","pow","fitDeclineParameters","data","fitWindow","_data$","length","value","sorted","slice","sort","a","recent","min","bestParams","bestError","Infinity","error","findOptimalD","bmin","max","bmax","recentData","bestD","err","d","pred","Dmin","Dmax","detectDateColumn","columns","candidates","filter","h","lower","toLowerCase","includes","detectColumns","phases","forEach","header","oil","water","gas","pressure","InteractiveDCAChart","dataString","startDate","endDate","colors","yScaleType","yMultiplier","forecastDays","autoForecast","onParametersCalculated","_s","svgRef","xScaleRef","yScaleRef","yAxisRef","prevParamsRef","lastOnParamsCallRef","hoverInfo","setHoverInfo","zoomTransform","setZoomTransform","parsedData","csvParse","console","hasData","prodDateCol","phasesDetected","filteredData","arr","map","row","Date","isNaN","getTime","sd","ed","localHasData","firstDate","date","phaseData","result","Object","keys","phase","tMax","lastProdDate","phaseParams","setPhaseParams","autoFitEnabled","setAutoFitEnabled","activeKey","setActiveKey","handleKeyDown","e","key","handleKeyUp","window","addEventListener","removeEventListener","newParams","_arr$","JSON","stringify","current","calculatedEUR","results","forecastAverage","fa","Q_start","steps","sum","i","Q","stringifiedNew","stringifiedPrev","allHistoricalPoints","out","push","calcForecast","tMaxVal","days","Qstart","dtFraction","q","dt","allForecastPoints","obj","combinedAll","values","concat","updateChartElements","newYScale","svg","select","yAxis","axisLeft","ticks","call","selectAll","attr","y","each","Array","isArray","xScale","newLineGen","line","x","dd","curve","curveMonotoneX","margin","top","right","bottom","left","width","height","remove","dateExtent","extent","minDateDomain","maxDateDomain","qExtent","minQ","maxQ","scaleTime","domain","range","yDomain","yScale","scaleLog","scaleLinear","xAxis","axisBottom","tickFormat","timeFormat","append","style","yAxisG","node","text","pts","o","enter","lineData","frac","tVal","QVal","lineGen","datum","drag","on","event","prev","copy","curr","dy","setTimeout","currentYScale","fc","lineGenFc","color","brighter","zoomBehavior","zoom","scaleExtent","transform","rescaleY","position","children","ref","onMouseMove","mouseX","pointer","invert","vals","undefined","onMouseOut","fileName","_jsxFileName","lineNumber","columnNumber","pointerEvents","background","border","padding","fontSize","borderRadius","toDateString","ph","toUpperCase","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/lozan/Desktop/Git/dca-spotfire/frontend/src/InteractiveDCAChart.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst calculateRate = (Qi, b, D, t) => {\r\n  if (b === 0) {\r\n    return Qi * Math.exp(-D * t);\r\n  }\r\n  return Qi / Math.pow(1 + b * D * t, 1 / b);\r\n};\r\n\r\nconst fitDeclineParameters = (data, fitWindow = 60) => {\r\n  if (!data || data.length < 3)\r\n    return { Qi: data?.[0]?.value || 100, b: 0.9, D: 0.01 };\r\n\r\n  const sorted = data.slice().sort((a, b) => a.t - b.t);\r\n  const Qi = sorted[0].value;\r\n  const recent = sorted.slice(-Math.min(fitWindow, sorted.length));\r\n  let bestParams = { b: 0, D: 0.01 }, bestError = Infinity;\r\n\r\n  // Coarse search for b\r\n  for (let b = 0; b <= 1; b += 0.1) {\r\n    const { D, error } = findOptimalD(recent, Qi, b);\r\n    if (error < bestError) {\r\n      bestError = error;\r\n      bestParams = { b, D };\r\n    }\r\n  }\r\n  // Refine b\r\n  const bmin = Math.max(0, bestParams.b - 0.1);\r\n  const bmax = Math.min(1, bestParams.b + 0.1);\r\n  for (let b = bmin; b <= bmax; b += 0.01) {\r\n    const { D, error } = findOptimalD(recent, Qi, b);\r\n    if (error < bestError) {\r\n      bestError = error;\r\n      bestParams = { b, D };\r\n    }\r\n  }\r\n  return { Qi, b: bestParams.b, D: bestParams.D };\r\n};\r\n\r\nfunction findOptimalD(recentData, Qi, b) {\r\n  let bestD = 0.01, bestError = Infinity;\r\n  for (let D = 0.001; D <= 0.5; D += 0.005) {\r\n    let err = 0;\r\n    for (const d of recentData) {\r\n      const pred = calculateRate(Qi, b, D, d.t);\r\n      err += (pred - d.value) ** 2;\r\n    }\r\n    if (err < bestError) {\r\n      bestError = err;\r\n      bestD = D;\r\n    }\r\n  }\r\n  // Refine around bestD\r\n  const Dmin = Math.max(0.001, bestD - 0.005);\r\n  const Dmax = bestD + 0.005;\r\n  for (let D = Dmin; D <= Dmax; D += 0.0005) {\r\n    let err = 0;\r\n    for (const d of recentData) {\r\n      const pred = calculateRate(Qi, b, D, d.t);\r\n      err += (pred - d.value) ** 2;\r\n    }\r\n    if (err < bestError) {\r\n      bestError = err;\r\n      bestD = D;\r\n    }\r\n  }\r\n  return { D: bestD, error: bestError };\r\n}\r\n\r\n// Helper functions moved out to avoid re-declaration in component\r\nfunction detectDateColumn(columns) {\r\n  const candidates = columns.filter(h => {\r\n    const lower = h.toLowerCase();\r\n    return (\r\n      (lower.includes(\"prod\") && lower.includes(\"date\")) ||\r\n      lower.includes(\"proddt\") ||\r\n      lower.includes(\"proddttm\") ||\r\n      lower === \"date\" ||\r\n      lower === \"datetime\"\r\n    );\r\n  });\r\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\r\n}\r\n\r\nfunction detectColumns(columns) {\r\n  let phases = {};\r\n  columns.forEach(header => {\r\n    const lower = header.toLowerCase();\r\n    if (lower.includes(\"bopd\") || (lower.includes(\"oil\") && !phases.oil)) {\r\n      phases.oil = header;\r\n    }\r\n    if (lower.includes(\"bwpd\") || (lower.includes(\"water\") && !phases.water)) {\r\n      phases.water = header;\r\n    }\r\n    if (lower.includes(\"mcfd\") || (lower.includes(\"gas\") && !phases.gas)) {\r\n      phases.gas = header;\r\n    }\r\n    if ((lower.includes(\"pip\") || lower.includes(\"pressure\") || lower.includes(\"psi\")) && !phases.pressure) {\r\n      phases.pressure = header;\r\n    }\r\n  });\r\n  return phases;\r\n}\r\n\r\nexport default function InteractiveDCAChart({\r\n  dataString,\r\n  startDate,\r\n  endDate,\r\n  colors,\r\n  yScaleType,\r\n  yMultiplier, // Always 1 from parent.\r\n  forecastDays,\r\n  autoForecast = true,\r\n  onParametersCalculated\r\n}) {\r\n  const svgRef = useRef(null);\r\n  const xScaleRef = useRef(null);\r\n  const yScaleRef = useRef(null); // Store the current y scale\r\n  const yAxisRef = useRef(null); // Store the y-axis group element\r\n  \r\n  // Store previous parameter values to prevent redundant updates\r\n  const prevParamsRef = useRef({});\r\n  const lastOnParamsCallRef = useRef(null);\r\n  \r\n  // For tooltip: store hover info.\r\n  const [hoverInfo, setHoverInfo] = useState(null);\r\n  // Store current zoom transform for proper axis updates\r\n  const [zoomTransform, setZoomTransform] = useState(null);\r\n\r\n  // Parse CSV data.\r\n  const parsedData = useMemo(() => {\r\n    try {\r\n      return d3.csvParse(dataString);\r\n    } catch (err) {\r\n      console.error(\"Error parsing CSV:\", err);\r\n      return [];\r\n    }\r\n  }, [dataString]);\r\n\r\n  const hasData = parsedData.length > 0;\r\n  const prodDateCol = useMemo(() => \r\n    hasData ? detectDateColumn(parsedData.columns) : \"Production_Date\", \r\n  [hasData, parsedData]);\r\n  \r\n  const phasesDetected = useMemo(() => \r\n    hasData ? detectColumns(parsedData.columns) : {}, \r\n  [hasData, parsedData]);\r\n  \r\n  const filteredData = useMemo(() => {\r\n    if (!hasData) return [];\r\n    let arr = parsedData.map(row => ({\r\n      ...row,\r\n      [prodDateCol]: new Date(row[prodDateCol])\r\n    })).filter(row => !isNaN(row[prodDateCol].getTime()));\r\n    arr.sort((a, b) => a[prodDateCol] - b[prodDateCol]);\r\n    if (startDate) {\r\n      const sd = new Date(startDate);\r\n      arr = arr.filter(row => row[prodDateCol] >= sd);\r\n    }\r\n    if (endDate) {\r\n      const ed = new Date(endDate);\r\n      arr = arr.filter(row => row[prodDateCol] <= ed);\r\n    }\r\n    return arr;\r\n  }, [parsedData, prodDateCol, startDate, endDate, hasData]);\r\n\r\n  const localHasData = filteredData.length > 0;\r\n  const firstDate = useMemo(() => \r\n    localHasData ? filteredData[0][prodDateCol] : new Date(),\r\n  [localHasData, filteredData, prodDateCol]);\r\n\r\n  const data = useMemo(() => {\r\n    if (!localHasData) return [];\r\n    return filteredData.map(row => {\r\n      const date = row[prodDateCol];\r\n      return { ...row, t: (date - firstDate) / (1000 * 60 * 60 * 24) };\r\n    });\r\n  }, [filteredData, localHasData, firstDate, prodDateCol]);\r\n\r\n  const phaseData = useMemo(() => {\r\n    let result = {};\r\n    Object.keys(phasesDetected).forEach(phase => {\r\n      result[phase] = data.map(d => ({\r\n        t: d.t,\r\n        value: +d[phasesDetected[phase]]\r\n      })).filter(d => !isNaN(d.value));\r\n    });\r\n    return result;\r\n  }, [data, phasesDetected]);\r\n\r\n  const tMax = useMemo(() => \r\n    localHasData ? d3.max(data, d => d.t) : 0,\r\n  [data, localHasData]);\r\n  \r\n  const lastProdDate = useMemo(() => \r\n    localHasData ? d3.max(data, d => d[prodDateCol]) : new Date(),\r\n  [data, localHasData, prodDateCol]);\r\n\r\n  const [phaseParams, setPhaseParams] = useState({});\r\n  const [autoFitEnabled, setAutoFitEnabled] = useState(true);\r\n  const [activeKey, setActiveKey] = useState(null);\r\n\r\n  // Key events for adjusting parameters.\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      if ([\"d\", \"q\", \"b\"].includes(key)) setActiveKey(key);\r\n    };\r\n    const handleKeyUp = () => setActiveKey(null);\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    window.addEventListener(\"keyup\", handleKeyUp);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n      window.removeEventListener(\"keyup\", handleKeyUp);\r\n    };\r\n  }, []);\r\n\r\n  // Auto-fit decline parameters with memoized input dependencies\r\n  useEffect(() => {\r\n    if (!localHasData) return;\r\n    \r\n    let newParams = {};\r\n    Object.keys(phaseData).forEach(phase => {\r\n      const arr = phaseData[phase];\r\n      if (arr.length < 3) {\r\n        newParams[phase] = { Qi: arr?.[0]?.value || 100, b: 0.9, D: 0.01 };\r\n      } else {\r\n        newParams[phase] = fitDeclineParameters(arr);\r\n      }\r\n    });\r\n    \r\n    // Only update state if parameters have actually changed and autofit is enabled\r\n    if (autoFitEnabled && JSON.stringify(newParams) !== JSON.stringify(prevParamsRef.current)) {\r\n      prevParamsRef.current = newParams;\r\n      setPhaseParams(newParams);\r\n    }\r\n  }, [phaseData, localHasData, autoFitEnabled]);\r\n\r\n  const calculatedEUR = useMemo(() => {\r\n    let results = {};\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      const { Qi, b, D } = phaseParams[phase];\r\n      if (b === 0) results[phase] = Qi / D;\r\n      else if (b > 0 && b < 1) results[phase] = Qi / (D * (1 - b));\r\n      else if (b === 1) results[phase] = Qi * 10000;\r\n      else results[phase] = \"N/A\";\r\n    });\r\n    return results;\r\n  }, [phaseParams]);\r\n\r\n  // Compute forecast average for first 60 days.\r\n  const forecastAverage = useMemo(() => {\r\n    let fa = {};\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      const { Qi, b, D } = phaseParams[phase];\r\n      const Q_start = calculateRate(Qi, b, D, tMax);\r\n      const steps = 60;\r\n      let sum = 0;\r\n      for (let i = 0; i <= steps; i++) {\r\n        const t = (i / steps) * 60;\r\n        const Q = b === 0 ? Q_start * Math.exp(-D * t) : Q_start / Math.pow(1 + b * D * t, 1 / b);\r\n        sum += Q;\r\n      }\r\n      fa[phase] = sum / (steps + 1);\r\n    });\r\n    return fa;\r\n  }, [phaseParams, tMax]);\r\n\r\n  // FIX: Use useEffect with proper comparison to prevent infinite loops\r\n  useEffect(() => {\r\n    if (onParametersCalculated) {\r\n      const newParams = { phaseParams, calculatedEUR, forecastAverage };\r\n      const stringifiedNew = JSON.stringify(newParams);\r\n      const stringifiedPrev = JSON.stringify(lastOnParamsCallRef.current);\r\n      \r\n      // Only call the callback if parameters have actually changed\r\n      if (stringifiedNew !== stringifiedPrev) {\r\n        lastOnParamsCallRef.current = newParams;\r\n        onParametersCalculated(newParams);\r\n      }\r\n    }\r\n  }, [phaseParams, calculatedEUR, forecastAverage, onParametersCalculated]);\r\n\r\n  const allHistoricalPoints = useMemo(() => {\r\n    let out = [];\r\n    Object.keys(phaseData).forEach(phase => {\r\n      phaseData[phase].forEach(d => {\r\n        out.push({\r\n          date: new Date(firstDate.getTime() + d.t * 86400000),\r\n          Q: d.value,\r\n          phase\r\n        });\r\n      });\r\n    });\r\n    return out;\r\n  }, [phaseData, firstDate]);\r\n\r\n  function calcForecast(Qi, b, D, tMaxVal, days) {\r\n    let Qstart = calculateRate(Qi, b, D, tMaxVal);\r\n    let arr = [];\r\n    const steps = 50;\r\n    for (let i = 0; i <= steps; i++) {\r\n      const dtFraction = (i / steps) * days;\r\n      const q = b === 0 ? Qstart * Math.exp(-D * dtFraction) : Qstart / Math.pow(1 + b * D * dtFraction, 1 / b);\r\n      const dt = new Date(lastProdDate.getTime() + dtFraction * 86400000);\r\n      arr.push({ date: dt, Q: q });\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  const allForecastPoints = useMemo(() => {\r\n    let out = {};\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      const { Qi, b, D } = phaseParams[phase];\r\n      if (!Qi || D <= 0) {\r\n        out[phase] = [];\r\n      } else {\r\n        out[phase] = calcForecast(Qi, b, D, tMax, forecastDays).map(obj => ({\r\n          ...obj,\r\n          phase\r\n        }));\r\n      }\r\n    });\r\n    return out;\r\n  }, [phaseParams, tMax, forecastDays, lastProdDate]);\r\n\r\n  const combinedAll = useMemo(() => {\r\n    let arr = [...allHistoricalPoints];\r\n    Object.values(allForecastPoints).forEach(a => (arr = arr.concat(a)));\r\n    return arr;\r\n  }, [allHistoricalPoints, allForecastPoints]);\r\n\r\n  // Helper function to update chart elements with a transformed y scale\r\n  const updateChartElements = (newYScale) => {\r\n    // Store the new scale for tooltip use\r\n    yScaleRef.current = newYScale;\r\n    \r\n    // Get the SVG container\r\n    const svg = d3.select(svgRef.current);\r\n    \r\n    // Update y-axis with new scale\r\n    if (yAxisRef.current) {\r\n      const yAxis = yScaleType === \"log\" \r\n        ? d3.axisLeft(newYScale).ticks(6, \"~s\") \r\n        : d3.axisLeft(newYScale);\r\n      \r\n      d3.select(yAxisRef.current).call(yAxis);\r\n    }\r\n    \r\n    // Update circles (historical data points)\r\n    svg.selectAll(\"circle\").attr(\"cy\", d => {\r\n      const y = newYScale(d.Q);\r\n      return isNaN(y) ? 0 : y;\r\n    });\r\n    \r\n    // Update all paths (decline curves and forecasts)\r\n    svg.selectAll(\"path\").each(function(d) {\r\n      if (Array.isArray(d)) {\r\n        const xScale = xScaleRef.current;\r\n        if (!xScale) return;\r\n        \r\n        const newLineGen = d3.line()\r\n          .x(dd => {\r\n            const x = xScale(dd.date);\r\n            return isNaN(x) ? 0 : x;\r\n          })\r\n          .y(dd => {\r\n            const y = newYScale(dd.Q);\r\n            return isNaN(y) ? 0 : y;\r\n          })\r\n          .curve(d3.curveMonotoneX);\r\n          \r\n        d3.select(this).attr(\"d\", newLineGen(d));\r\n      }\r\n    });\r\n  };\r\n\r\n  // D3 rendering with careful dependency tracking\r\n  useEffect(() => {\r\n    if (!localHasData) return;\r\n    \r\n    const margin = { top: 20, right: 30, bottom: 40, left: 60 };\r\n    const width = 800;\r\n    const height = 400;\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    // Handle possible empty arrays with sensible defaults\r\n    const dateExtent = d3.extent(combinedAll, d => d.date);\r\n    const minDateDomain = dateExtent[0] || new Date();\r\n    const maxDateDomain = dateExtent[1] || new Date();\r\n    \r\n    const qExtent = d3.extent(combinedAll, d => d.Q);\r\n    let minQ = qExtent[0] || 0;\r\n    let maxQ = qExtent[1] || 100;\r\n    \r\n    if (yScaleType === \"log\" && minQ <= 0) minQ = 1e-2;\r\n    \r\n    const xScale = d3.scaleTime()\r\n      .domain([minDateDomain, maxDateDomain])\r\n      .range([margin.left, width - margin.right]);\r\n      \r\n    xScaleRef.current = xScale;\r\n    \r\n    const yDomain = yScaleType === \"log\" ? [Math.max(1e-5, minQ), maxQ] : [0, maxQ];\r\n    const yScale = yScaleType === \"log\"\r\n      ? d3.scaleLog().domain(yDomain).range([height - margin.bottom, margin.top])\r\n      : d3.scaleLinear().domain(yDomain).range([height - margin.bottom, margin.top]);\r\n      \r\n    yScaleRef.current = yScale;\r\n\r\n    const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\r\n    const yAxis = yScaleType === \"log\" ? d3.axisLeft(yScale).ticks(6, \"~s\") : d3.axisLeft(yScale);\r\n    \r\n    svg.append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .attr(\"transform\", \"rotate(-45)\")\r\n      .style(\"text-anchor\", \"end\");\r\n      \r\n    // Store a reference to the y-axis for updates during interaction\r\n    const yAxisG = svg.append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(yAxis);\r\n      \r\n    yAxisRef.current = yAxisG.node();\r\n      \r\n    svg.append(\"text\")\r\n      .attr(\"x\", width / 2)\r\n      .attr(\"y\", height - 5)\r\n      .style(\"text-anchor\", \"middle\")\r\n      .text(\"Date\");\r\n      \r\n    svg.append(\"text\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"x\", -height / 2)\r\n      .attr(\"y\", 15)\r\n      .style(\"text-anchor\", \"middle\")\r\n      .text(\"Production Rate\");\r\n\r\n    // Plot historical points with NaN safety checks\r\n    Object.keys(phasesDetected).forEach(phase => {\r\n      const pts = allHistoricalPoints.filter(o => o.phase === phase);\r\n      svg.selectAll(`circle.hist-${phase}`)\r\n        .data(pts)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", `hist-${phase}`)\r\n        .attr(\"cx\", d => {\r\n          const x = xScale(d.date);\r\n          return isNaN(x) ? margin.left : x; // Prevent NaN\r\n        })\r\n        .attr(\"cy\", d => {\r\n          const y = yScale(d.Q);\r\n          return isNaN(y) ? height - margin.bottom : y; // Prevent NaN\r\n        })\r\n        .attr(\"r\", 3)\r\n        .attr(\"fill\", colors[phase] || \"#888\");\r\n    });\r\n\r\n    // Plot decline lines with drag behavior.\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      const { Qi, b, D } = phaseParams[phase];\r\n      const lineData = [];\r\n      const steps = 100;\r\n      for (let i = 0; i <= steps; i++) {\r\n        const frac = i / steps;\r\n        const tVal = tMax * frac;\r\n        const QVal = calculateRate(Qi, b, D, tVal);\r\n        const dt = new Date(firstDate.getTime() + tVal * 86400000);\r\n        lineData.push({ date: dt, Q: QVal });\r\n      }\r\n      \r\n      // Only draw the line if we have valid data\r\n      if (lineData.length > 1) {\r\n        const lineGen = d3.line()\r\n          .x(d => {\r\n            const x = xScale(d.date);\r\n            return isNaN(x) ? 0 : x; // Prevent NaN\r\n          })\r\n          .y(d => {\r\n            const y = yScale(d.Q);\r\n            return isNaN(y) ? 0 : y; // Prevent NaN\r\n          })\r\n          .curve(d3.curveMonotoneX);\r\n          \r\n        svg.append(\"path\")\r\n          .datum(lineData)\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", colors[phase] || \"#888888\")\r\n          .attr(\"stroke-width\", 2)\r\n          .style(\"cursor\", \"pointer\")\r\n          .attr(\"d\", lineGen)\r\n          .call(\r\n            d3.drag().on(\"drag\", (event) => {\r\n              if (autoFitEnabled) setAutoFitEnabled(false);\r\n              setPhaseParams(prev => {\r\n                const copy = { ...prev };\r\n                const curr = { ...copy[phase] };\r\n                if (activeKey === \"d\") {\r\n                  curr.D = Math.max(0.0001, curr.D + event.dy * 0.001);\r\n                } else if (activeKey === \"q\") {\r\n                  curr.Qi = Math.max(1, curr.Qi - event.dy);\r\n                } else if (activeKey === \"b\") {\r\n                  curr.b = Math.max(0, Math.min(1, curr.b + event.dy * 0.005));\r\n                }\r\n                copy[phase] = curr;\r\n                \r\n                // Update the chart in real-time during drag\r\n                setTimeout(() => {\r\n                  // Use the current yScale (may be transformed by zoom)\r\n                  const currentYScale = yScaleRef.current;\r\n                  if (currentYScale) updateChartElements(currentYScale);\r\n                }, 0);\r\n                \r\n                return copy;\r\n              });\r\n            })\r\n          );\r\n      }\r\n    });\r\n\r\n    // Plot forecast lines with hover/drag effects.\r\n    Object.keys(allForecastPoints).forEach(phase => {\r\n      const fc = allForecastPoints[phase];\r\n      if (fc.length > 1) {\r\n        const lineGenFc = d3.line()\r\n          .x(d => {\r\n            const x = xScale(d.date);\r\n            return isNaN(x) ? 0 : x;\r\n          })\r\n          .y(d => {\r\n            const y = yScale(d.Q);\r\n            return isNaN(y) ? 0 : y;\r\n          })\r\n          .curve(d3.curveMonotoneX);\r\n          \r\n        svg.append(\"path\")\r\n          .datum(fc)\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke\", d3.color(colors[phase] || \"#888\").brighter(1.2))\r\n          .attr(\"stroke-width\", 3)\r\n          .attr(\"stroke-dasharray\", \"5,3\")\r\n          .attr(\"d\", lineGenFc)\r\n          .on(\"mouseover\", function() {\r\n            d3.select(this).attr(\"stroke-width\", 5);\r\n          })\r\n          .on(\"mouseout\", function() {\r\n            d3.select(this).attr(\"stroke-width\", 3);\r\n          })\r\n          .on(\"mousedown\", function() {\r\n            d3.select(this).style(\"cursor\", \"grabbing\");\r\n          })\r\n          .on(\"mouseup\", function() {\r\n            d3.select(this).style(\"cursor\", \"grab\");\r\n          });\r\n      }\r\n    });\r\n\r\n    svg.append(\"line\")\r\n      .attr(\"x1\", xScale(lastProdDate))\r\n      .attr(\"y1\", margin.top)\r\n      .attr(\"x2\", xScale(lastProdDate))\r\n      .attr(\"y2\", height - margin.bottom)\r\n      .attr(\"stroke\", \"#666\")\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"stroke-dasharray\", \"5,5\");\r\n      \r\n    svg.append(\"text\")\r\n      .attr(\"x\", xScale(lastProdDate) + 5)\r\n      .attr(\"y\", margin.top + 15)\r\n      .attr(\"fill\", \"#666\")\r\n      .text(\"Forecast →\");\r\n\r\n    // d3-zoom for vertical scaling with proper axis updates\r\n    const zoomBehavior = d3.zoom()\r\n      .scaleExtent([0.5, 10])\r\n      .on(\"zoom\", (event) => {\r\n        setZoomTransform(event.transform);\r\n        \r\n        // Create the transformed y scale\r\n        const newYScale = event.transform.rescaleY(yScale);\r\n        \r\n        // Update all chart elements\r\n        updateChartElements(newYScale);\r\n      });\r\n      \r\n    svg.call(zoomBehavior);\r\n    \r\n    // If we have a stored zoom transform, apply it\r\n    if (zoomTransform) {\r\n      svg.call(zoomBehavior.transform, zoomTransform);\r\n    }\r\n  }, [\r\n    localHasData,\r\n    combinedAll,\r\n    firstDate,\r\n    lastProdDate,\r\n    yScaleType,\r\n    forecastDays,\r\n    autoFitEnabled,\r\n    tMax,\r\n    activeKey,\r\n    phaseParams,\r\n    colors,\r\n    phasesDetected,\r\n    allHistoricalPoints,\r\n    allForecastPoints\r\n  ]);\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <svg\r\n        ref={svgRef}\r\n        width={800}\r\n        height={400}\r\n        onMouseMove={(event) => {\r\n          if (!localHasData || !xScaleRef.current) return;\r\n          \r\n          const [mouseX] = d3.pointer(event, svgRef.current);\r\n          const date = xScaleRef.current.invert(mouseX);\r\n          const t = (date - firstDate) / 86400000;\r\n          \r\n          let vals = {};\r\n          Object.keys(phaseParams).forEach(phase => {\r\n            const { Qi, b, D } = phaseParams[phase] || {};\r\n            if (Qi && b !== undefined && D) {\r\n              vals[phase] = calculateRate(Qi, b, D, t);\r\n            }\r\n          });\r\n          \r\n          setHoverInfo({ x: mouseX, date, values: vals });\r\n        }}\r\n        onMouseOut={() => setHoverInfo(null)}\r\n      />\r\n      {hoverInfo && (\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            left: hoverInfo.x + 5,\r\n            top: 0,\r\n            pointerEvents: 'none',\r\n            background: 'rgba(255,255,255,0.9)',\r\n            border: '1px solid #ccc',\r\n            padding: 5,\r\n            fontSize: 12,\r\n            borderRadius: 4\r\n          }}\r\n        >\r\n          <div>{hoverInfo.date.toDateString()}</div>\r\n          {Object.keys(hoverInfo.values).map(ph => (\r\n            <div key={ph}>\r\n              {ph.toUpperCase()}: {hoverInfo.values[ph].toFixed(2)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}