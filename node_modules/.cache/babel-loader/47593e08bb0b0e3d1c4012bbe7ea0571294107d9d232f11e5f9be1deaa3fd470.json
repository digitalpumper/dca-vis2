{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lozan\\\\Desktop\\\\Git\\\\dca-spotfire\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport * as XLSX from 'xlsx';\nimport * as d3 from 'd3';\nimport InteractiveDCAChart from './InteractiveDCAChart';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\n// Helper: Auto-detect production date column.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst detectDateColumn = headers => {\n  const candidates = headers.filter(h => {\n    const lower = h.toLowerCase();\n    return lower.includes(\"prod\") && lower.includes(\"date\") || lower.includes(\"proddt\") || lower.includes(\"proddttm\") || lower === \"date\" || lower === \"datetime\";\n  });\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\n};\nfunction App() {\n  _s();\n  const [secret, setSecret] = useState('');\n  const [dataString, setDataString] = useState('');\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Date filter states.\n  const [minDate, setMinDate] = useState(null);\n  const [maxDate, setMaxDate] = useState(null);\n  // Use a range (two values) for the slider\n  const [dateRange, setDateRange] = useState([0, 0]);\n  useEffect(() => {\n    const params = queryString.parse(window.location.search);\n    if (params.secret) setSecret(params.secret);\n    if (params.data) setDataString(params.data);\n  }, []);\n\n  // When dataString changes, parse it to determine min and max dates.\n  useEffect(() => {\n    if (!dataString) return;\n    try {\n      const parsed = d3.csvParse(dataString);\n      if (parsed && parsed.length > 0 && parsed.columns) {\n        const dateCol = detectDateColumn(parsed.columns);\n        const dates = parsed.map(row => new Date(row[dateCol])).filter(d => !isNaN(d));\n        if (dates.length > 0) {\n          const minD = new Date(Math.min(...dates));\n          const maxD = new Date(Math.max(...dates));\n          setMinDate(minD);\n          setMaxDate(maxD);\n          const totalDays = Math.ceil((maxD.getTime() - minD.getTime()) / (1000 * 60 * 60 * 24));\n          setDateRange([0, totalDays]);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error parsing dates\", e);\n    }\n  }, [dataString]);\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const fileName = file.name.toLowerCase();\n    const reader = new FileReader();\n    if (fileName.endsWith('.csv') || fileName.endsWith('.txt')) {\n      reader.onload = e => setDataString(e.target.result);\n      reader.readAsText(file);\n    } else if (fileName.endsWith('.xls') || fileName.endsWith('.xlsx')) {\n      reader.onload = e => {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, {\n          type: 'array'\n        });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        const csv = XLSX.utils.sheet_to_csv(worksheet);\n        setDataString(csv);\n      };\n      reader.readAsArrayBuffer(file);\n    } else {\n      alert('Unsupported file format. Please upload CSV, TXT, XLS, or XLSX.');\n    }\n  };\n  const handleSubmit = async () => {\n    if (!secret || !dataString) {\n      setError('Secret key and data are required.');\n      return;\n    }\n    try {\n      const res = await fetch('http://127.0.0.1:5000/api/validate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          secret,\n          data: dataString\n        })\n      });\n      const json = await res.json();\n      if (json.error) {\n        setError(json.error);\n        setResponse(null);\n      } else {\n        setResponse(json);\n        setError(null);\n      }\n    } catch (err) {\n      setError('Error connecting to backend: ' + err.toString());\n      setResponse(null);\n    }\n  };\n  const totalDays = minDate && maxDate ? Math.ceil((maxDate.getTime() - minDate.getTime()) / (1000 * 60 * 60 * 24)) : 0;\n\n  // Calculate filtered start and end dates based on the dual-range slider.\n  const filteredStartDate = minDate ? new Date(minDate.getTime() + dateRange[0] * 24 * 60 * 60 * 1000) : null;\n  const filteredEndDate = minDate ? new Date(minDate.getTime() + dateRange[1] * 24 * 60 * 60 * 1000) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20,\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Custom DCA Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Secret Key:\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: secret,\n          onChange: e => setSecret(e.target.value),\n          placeholder: \"Enter secret key\",\n          style: {\n            width: '300px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Upload CSV/Excel file:\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: dataString,\n        onChange: e => setDataString(e.target.value),\n        placeholder: \"CSV data will appear here, or paste CSV data directly...\",\n        rows: \"6\",\n        cols: \"80\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), minDate && maxDate && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Production Date Range (offset from \", minDate.toDateString(), \"):\", /*#__PURE__*/_jsxDEV(Slider.Range, {\n          min: 0,\n          max: totalDays,\n          value: dateRange,\n          onChange: newRange => setDateRange(newRange),\n          tipFormatter: value => {\n            const d = new Date(minDate.getTime() + value * 24 * 60 * 60 * 1000);\n            return d.toDateString();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [filteredStartDate.toDateString(), \" \\u2013 \", filteredEndDate.toDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginTop: 10\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Data Successfully Processed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Columns: \", response.columns.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Rows: \", response.rows]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), dataString && /*#__PURE__*/_jsxDEV(InteractiveDCAChart, {\n      dataString: dataString,\n      startDate: filteredStartDate ? filteredStartDate.toISOString().slice(0, 10) : \"\",\n      endDate: filteredEndDate ? filteredEndDate.toISOString().slice(0, 10) : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"koV+GOFF/FnEs4an9U6/C5qr7Pw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","queryString","XLSX","d3","InteractiveDCAChart","Slider","jsxDEV","_jsxDEV","detectDateColumn","headers","candidates","filter","h","lower","toLowerCase","includes","length","App","_s","secret","setSecret","dataString","setDataString","response","setResponse","error","setError","minDate","setMinDate","maxDate","setMaxDate","dateRange","setDateRange","params","parse","window","location","search","data","parsed","csvParse","columns","dateCol","dates","map","row","Date","d","isNaN","minD","Math","min","maxD","max","totalDays","ceil","getTime","e","console","handleFileUpload","event","file","target","files","fileName","name","reader","FileReader","endsWith","onload","result","readAsText","Uint8Array","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","csv","utils","sheet_to_csv","readAsArrayBuffer","alert","handleSubmit","res","fetch","method","body","JSON","stringify","json","err","toString","filteredStartDate","filteredEndDate","style","padding","fontFamily","children","_jsxFileName","lineNumber","columnNumber","value","onChange","placeholder","width","marginTop","rows","cols","toDateString","Range","newRange","tipFormatter","onClick","color","join","startDate","toISOString","slice","endDate","_c","$RefreshReg$"],"sources":["C:/Users/lozan/Desktop/Git/dca-spotfire/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport * as XLSX from 'xlsx';\nimport * as d3 from 'd3';\nimport InteractiveDCAChart from './InteractiveDCAChart';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\n// Helper: Auto-detect production date column.\nconst detectDateColumn = (headers) => {\n  const candidates = headers.filter(h => {\n    const lower = h.toLowerCase();\n    return (lower.includes(\"prod\") && lower.includes(\"date\")) ||\n           lower.includes(\"proddt\") ||\n           lower.includes(\"proddttm\") ||\n           lower === \"date\" ||\n           lower === \"datetime\";\n  });\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\n};\n\nfunction App() {\n  const [secret, setSecret] = useState('');\n  const [dataString, setDataString] = useState('');\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Date filter states.\n  const [minDate, setMinDate] = useState(null);\n  const [maxDate, setMaxDate] = useState(null);\n  // Use a range (two values) for the slider\n  const [dateRange, setDateRange] = useState([0, 0]);\n\n  useEffect(() => {\n    const params = queryString.parse(window.location.search);\n    if (params.secret) setSecret(params.secret);\n    if (params.data) setDataString(params.data);\n  }, []);\n\n  // When dataString changes, parse it to determine min and max dates.\n  useEffect(() => {\n    if (!dataString) return;\n    try {\n      const parsed = d3.csvParse(dataString);\n      if (parsed && parsed.length > 0 && parsed.columns) {\n        const dateCol = detectDateColumn(parsed.columns);\n        const dates = parsed.map(row => new Date(row[dateCol])).filter(d => !isNaN(d));\n        if (dates.length > 0) {\n          const minD = new Date(Math.min(...dates));\n          const maxD = new Date(Math.max(...dates));\n          setMinDate(minD);\n          setMaxDate(maxD);\n          const totalDays = Math.ceil((maxD.getTime() - minD.getTime()) / (1000 * 60 * 60 * 24));\n          setDateRange([0, totalDays]);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error parsing dates\", e);\n    }\n  }, [dataString]);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const fileName = file.name.toLowerCase();\n    const reader = new FileReader();\n    if (fileName.endsWith('.csv') || fileName.endsWith('.txt')) {\n      reader.onload = (e) => setDataString(e.target.result);\n      reader.readAsText(file);\n    } else if (fileName.endsWith('.xls') || fileName.endsWith('.xlsx')) {\n      reader.onload = (e) => {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, { type: 'array' });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        const csv = XLSX.utils.sheet_to_csv(worksheet);\n        setDataString(csv);\n      };\n      reader.readAsArrayBuffer(file);\n    } else {\n      alert('Unsupported file format. Please upload CSV, TXT, XLS, or XLSX.');\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!secret || !dataString) {\n      setError('Secret key and data are required.');\n      return;\n    }\n    try {\n      const res = await fetch('http://127.0.0.1:5000/api/validate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ secret, data: dataString })\n      });\n      const json = await res.json();\n      if (json.error) {\n        setError(json.error);\n        setResponse(null);\n      } else {\n        setResponse(json);\n        setError(null);\n      }\n    } catch (err) {\n      setError('Error connecting to backend: ' + err.toString());\n      setResponse(null);\n    }\n  };\n\n  const totalDays = minDate && maxDate \n    ? Math.ceil((maxDate.getTime() - minDate.getTime()) / (1000 * 60 * 60 * 24))\n    : 0;\n\n  // Calculate filtered start and end dates based on the dual-range slider.\n  const filteredStartDate = minDate \n    ? new Date(minDate.getTime() + dateRange[0] * 24 * 60 * 60 * 1000)\n    : null;\n  const filteredEndDate = minDate \n    ? new Date(minDate.getTime() + dateRange[1] * 24 * 60 * 60 * 1000)\n    : null;\n\n  return (\n    <div style={{ padding: 20, fontFamily: 'Arial, sans-serif' }}>\n      <h2>Custom DCA Application</h2>\n      <div>\n        <label>\n          Secret Key:&nbsp;\n          <input\n            type=\"text\"\n            value={secret}\n            onChange={(e) => setSecret(e.target.value)}\n            placeholder=\"Enter secret key\"\n            style={{ width: '300px' }}\n          />\n        </label>\n      </div>\n      <div style={{ marginTop: 10 }}>\n        <label>\n          Upload CSV/Excel file:&nbsp;\n          <input type=\"file\" onChange={handleFileUpload} />\n        </label>\n      </div>\n      <div style={{ marginTop: 10 }}>\n        <textarea\n          value={dataString}\n          onChange={(e) => setDataString(e.target.value)}\n          placeholder=\"CSV data will appear here, or paste CSV data directly...\"\n          rows=\"6\"\n          cols=\"80\"\n        ></textarea>\n      </div>\n      {minDate && maxDate && (\n        <div style={{ marginTop: 10 }}>\n          <label>\n            Production Date Range (offset from {minDate.toDateString()}):\n            <Slider.Range\n              min={0}\n              max={totalDays}\n              value={dateRange}\n              onChange={(newRange) => setDateRange(newRange)}\n              tipFormatter={value => {\n                const d = new Date(minDate.getTime() + value * 24 * 60 * 60 * 1000);\n                return d.toDateString();\n              }}\n            />\n            <div>\n              {filteredStartDate.toDateString()} – {filteredEndDate.toDateString()}\n            </div>\n          </label>\n        </div>\n      )}\n      <div style={{ marginTop: 10 }}>\n        <button onClick={handleSubmit}>Submit Data</button>\n      </div>\n      {error && <div style={{ color: 'red', marginTop: 10 }}>{error}</div>}\n      {response && (\n        <div style={{ marginTop: 10 }}>\n          <h3>Data Successfully Processed</h3>\n          <p>Columns: {response.columns.join(', ')}</p>\n          <p>Rows: {response.rows}</p>\n        </div>\n      )}\n      {dataString && (\n        <InteractiveDCAChart\n          dataString={dataString}\n          startDate={filteredStartDate ? filteredStartDate.toISOString().slice(0,10) : \"\"}\n          endDate={filteredEndDate ? filteredEndDate.toISOString().slice(0,10) : \"\"}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}