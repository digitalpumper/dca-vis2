{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lozan\\\\Desktop\\\\Git\\\\dca-spotfire\\\\frontend\\\\src\\\\InteractiveDCAChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\n\n// Helper: Darken a HEX color by a given factor.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst darkenColor = (hex, factor = 0.8) => {\n  let c = d3.color(hex);\n  if (c) {\n    c.r = Math.floor(c.r * factor);\n    c.g = Math.floor(c.g * factor);\n    c.b = Math.floor(c.b * factor);\n    return c.formatHex();\n  }\n  return hex;\n};\n\n// Helper: Lighten a HEX color by a given factor.\nconst lightenColor = (hex, factor = 1.2) => {\n  let c = d3.color(hex);\n  if (c) {\n    c.r = Math.min(255, Math.floor(c.r * factor));\n    c.g = Math.min(255, Math.floor(c.g * factor));\n    c.b = Math.min(255, Math.floor(c.b * factor));\n    return c.formatHex();\n  }\n  return hex;\n};\n\n// Auto-detect the production date column from common names.\nconst detectDateColumn = headers => {\n  const candidates = headers.filter(h => {\n    const lower = h.toLowerCase();\n    return lower.includes(\"prod\") && lower.includes(\"date\") || lower.includes(\"proddt\") || lower.includes(\"proddttm\") || lower === \"date\" || lower === \"datetime\";\n  });\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\n};\n\n// Auto-detect measurement columns using keywords.\nconst detectColumns = headers => {\n  let phases = {};\n  headers.forEach(header => {\n    const lower = header.toLowerCase();\n    // For oil: prefer \"bopd\", otherwise any \"oil\".\n    if (lower.includes(\"bopd\")) {\n      phases.oil = header;\n    } else if (lower.includes(\"oil\") && !phases.oil) {\n      phases.oil = header;\n    }\n    // For water: prefer \"bwpd\", otherwise any \"water\".\n    if (lower.includes(\"bwpd\")) {\n      phases.water = header;\n    } else if (lower.includes(\"water\") && !phases.water) {\n      phases.water = header;\n    }\n    // For gas: prefer \"mcfd\", otherwise any \"gas\".\n    if (lower.includes(\"mcfd\")) {\n      phases.gas = header;\n    } else if (lower.includes(\"gas\") && !phases.gas) {\n      phases.gas = header;\n    }\n    // For pressure: look for \"pip\", \"pressure\", or \"psi\".\n    if ((lower.includes(\"pip\") || lower.includes(\"pressure\") || lower.includes(\"psi\")) && !phases.pressure) {\n      phases.pressure = header;\n    }\n  });\n  return phases;\n};\n\n// Brute-force search for best-fit D using the last 60 days.\nconst fitD = (fitData, Qi, b) => {\n  let bestD = 0.01;\n  let bestError = Infinity;\n  for (let D = 0.001; D <= 0.1; D += 0.001) {\n    let error = 0;\n    fitData.forEach(d => {\n      const predicted = b === 0 ? Qi * Math.exp(-D * d.t) : Qi / Math.pow(1 + b * D * d.t, 1 / b);\n      error += Math.pow(predicted - d.value, 2);\n    });\n    if (error < bestError) {\n      bestError = error;\n      bestD = D;\n    }\n  }\n  return bestD;\n};\nconst InteractiveDCAChart = ({\n  dataString,\n  startDate,\n  endDate\n}) => {\n  _s();\n  // 1) Parse CSV data\n  const parsedData = useMemo(() => {\n    try {\n      return d3.csvParse(dataString);\n    } catch (err) {\n      console.error(\"Error parsing CSV:\", err);\n      return [];\n    }\n  }, [dataString]);\n  const hasData = parsedData && parsedData.length > 0;\n  const svgRef = useRef(null);\n\n  // 2) Detect columns\n  const prodDateCol = hasData ? detectDateColumn(parsedData.columns) : \"Production_Date\";\n  const phasesDetected = hasData ? detectColumns(parsedData.columns) : {};\n\n  // 3) Filter data by date\n  const filteredData = useMemo(() => {\n    if (!hasData) return [];\n    let dataWithDates = parsedData.map(row => ({\n      ...row,\n      [prodDateCol]: new Date(row[prodDateCol])\n    }));\n\n    // valid dates only\n    dataWithDates = dataWithDates.filter(row => {\n      const d = new Date(row[prodDateCol]);\n      return !isNaN(d.getTime());\n    });\n\n    // optional date range filter\n    if (startDate) {\n      const sd = new Date(startDate);\n      dataWithDates = dataWithDates.filter(row => row[prodDateCol] >= sd);\n    }\n    if (endDate) {\n      const ed = new Date(endDate);\n      dataWithDates = dataWithDates.filter(row => row[prodDateCol] <= ed);\n    }\n    return dataWithDates;\n  }, [parsedData, startDate, endDate, hasData, prodDateCol]);\n  const localHasData = filteredData && filteredData.length > 0;\n  const firstDate = localHasData ? filteredData[0][prodDateCol] : new Date();\n  // t = days since firstDate\n  const data = useMemo(() => {\n    if (!localHasData) return [];\n    return filteredData.map(row => {\n      const date = row[prodDateCol];\n      return {\n        ...row,\n        Production_Date: date,\n        t: (date - firstDate) / (1000 * 60 * 60 * 24)\n      };\n    });\n  }, [filteredData, prodDateCol, localHasData, firstDate]);\n\n  // 4) Build phase data (array of {t, value} for each phase)\n  const phaseData = {};\n  Object.keys(phasesDetected).forEach(phase => {\n    phaseData[phase] = localHasData ? data.map(d => ({\n      t: d.t,\n      value: +d[phasesDetected[phase]]\n    })) : [];\n  });\n\n  // 5) Calculate tMax, last production date\n  const tMax = localHasData ? d3.max(data, d => d.t) : 0;\n  const maxProdDate = localHasData ? d3.max(data, d => d.Production_Date) : new Date();\n\n  // 6) Fit initial parameters for each phase\n  const initialParams = {};\n  if (localHasData) {\n    Object.keys(phaseData).forEach(phase => {\n      const series = phaseData[phase];\n      if (!series || !series.length) {\n        initialParams[phase] = {\n          Qi: 0,\n          b: 0.9,\n          D: 0.01\n        };\n        return;\n      }\n      const Qi = series[0].value; // simplistic approach: first data point as Qi\n      const b = 0.9;\n      // only fit D based on last 60 days\n      const fitSeries = series.filter(d => d.t >= Math.max(0, tMax - 60));\n      const D = fitSeries.length > 0 ? fitD(fitSeries, Qi, b) : 0.01;\n      initialParams[phase] = {\n        Qi,\n        b,\n        D\n      };\n    });\n  }\n\n  // 7) State for interactive parameters, chart options\n  const [phaseParams, setPhaseParams] = useState(initialParams);\n  const [colors, setColors] = useState({\n    oil: \"#008000\",\n    water: \"#0000ff\",\n    gas: \"#ff0000\",\n    pressure: \"#000000\"\n  });\n  const [activeKey, setActiveKey] = useState(null);\n  const [yScaleType, setYScaleType] = useState(\"linear\");\n  const [yMultiplier, setYMultiplier] = useState(1.1);\n  const [forecastDays, setForecastDays] = useState(30);\n\n  // 8) Hotkey listeners (D, Q, B)\n  useEffect(() => {\n    const handleKeyDown = e => {\n      const key = e.key.toLowerCase();\n      if ([\"d\", \"q\", \"b\"].includes(key)) {\n        setActiveKey(key);\n      }\n    };\n    const handleKeyUp = () => {\n      setActiveKey(null);\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n\n  // 9) Build data arrays for historical & forecast, so we can set the correct domain\n  const allHistoricalPoints = [];\n  const allForecastPoints = {};\n  Object.keys(phaseData).forEach(phase => {\n    // historical\n    phaseData[phase].forEach(d => {\n      allHistoricalPoints.push({\n        date: new Date(firstDate.getTime() + d.t * 24 * 60 * 60 * 1000),\n        Q: d.value,\n        phase\n      });\n    });\n  });\n\n  // We'll store forecast arrays in allForecastPoints[phase].\n  Object.keys(phaseParams).forEach(phase => {\n    const {\n      Qi,\n      b,\n      D\n    } = phaseParams[phase];\n    // Calculate Q at tMax as the \"starting\" forecast value\n    const Q_start = b === 0 ? Qi * Math.exp(-D * tMax) : Qi / Math.pow(1 + b * D * tMax, 1 / b);\n    const forecastStartDate = maxProdDate; // last historical date\n    const forecastData = [];\n    const numForecastPts = 50; // number of forecast points\n\n    for (let i = 0; i <= numForecastPts; i++) {\n      // tForecast is additional time beyond tMax\n      const tForecast = forecastDays * i / numForecastPts;\n      // forecast production\n      const Q_forecast = b === 0 ? Q_start * Math.exp(-D * tForecast) : Q_start / Math.pow(1 + b * D * tForecast, 1 / b);\n      // date is last prod date + tForecast\n      const date = new Date(forecastStartDate.getTime() + tForecast * 24 * 60 * 60 * 1000);\n      forecastData.push({\n        date,\n        Q: Q_forecast,\n        phase\n      });\n    }\n    allForecastPoints[phase] = forecastData;\n  });\n\n  // Flatten them for domain calculations\n  const combinedForecast = Object.values(allForecastPoints).flat();\n  const combinedAll = [...allHistoricalPoints, ...combinedForecast];\n\n  // 10) If there's no data, don't render the chart\n  useEffect(() => {\n    if (!localHasData) return;\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 60\n    };\n    const width = 800;\n    const height = 400;\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    // 11) Determine domain from combined historical + forecast data\n    const [minDate, maxDate] = d3.extent(combinedAll, d => d.date);\n    const [minQ, maxQ] = d3.extent(combinedAll, d => d.Q);\n\n    // For safety in log scale, if minQ <= 0, we clamp to something > 0\n    const minYVal = minQ <= 0 ? 1e-2 : minQ;\n\n    // Build xScale\n    const xScale = d3.scaleTime().domain([minDate, maxDate]).range([margin.left, width - margin.right]);\n\n    // Build yScale\n    let yScale;\n    if (yScaleType === \"log\") {\n      yScale = d3.scaleLog().domain([Math.max(1e-5, minYVal), maxQ * yMultiplier]).range([height - margin.bottom, margin.top]);\n    } else {\n      yScale = d3.scaleLinear().domain([0, maxQ * yMultiplier]).range([height - margin.bottom, margin.top]);\n    }\n\n    // 12) Axes\n    const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\n    const yAxis = yScaleType === \"log\" ? d3.axisLeft(yScale).ticks(6, \"~s\") : d3.axisLeft(yScale);\n    svg.append(\"g\").attr(\"transform\", `translate(0,${height - margin.bottom})`).call(xAxis).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n    svg.append(\"g\").attr(\"transform\", `translate(${margin.left},0)`).call(yAxis);\n\n    // 13) Plot historical raw data (circles)\n    // Group them by phase so we can color appropriately\n    Object.keys(phasesDetected).forEach(phase => {\n      const points = allHistoricalPoints.filter(p => p.phase === phase);\n      svg.selectAll(`circle.hist-${phase}`).data(points).enter().append(\"circle\").attr(\"class\", `hist-${phase}`).attr(\"cx\", d => xScale(d.date)).attr(\"cy\", d => yScale(d.Q)).attr(\"r\", 3).attr(\"fill\", colors[phase] || \"#888\");\n    });\n\n    // 14) Plot historical decline lines (draggable)\n    Object.keys(phaseParams).forEach(phase => {\n      const {\n        Qi,\n        b,\n        D\n      } = phaseParams[phase];\n\n      // Build line data for \"historical decline\" (0 -> tMax)\n      const histLineData = [];\n      const numLinePts = 50;\n      for (let i = 0; i <= numLinePts; i++) {\n        const frac = i / numLinePts;\n        const tVal = tMax * frac; // between 0 and tMax\n        const QVal = b === 0 ? Qi * Math.exp(-D * tVal) : Qi / Math.pow(1 + b * D * tVal, 1 / b);\n        // Convert tVal back to actual date\n        const dateVal = new Date(firstDate.getTime() + tVal * 24 * 60 * 60 * 1000);\n        histLineData.push({\n          date: dateVal,\n          Q: QVal\n        });\n      }\n      const lineGenHist = d3.line().x(d => xScale(d.date)).y(d => yScale(d.Q));\n      svg.append(\"path\").datum(histLineData).attr(\"fill\", \"none\").attr(\"stroke\", colors[phase] || \"#888888\").attr(\"stroke-width\", 2).style(\"cursor\", \"pointer\").attr(\"d\", lineGenHist)\n      // DRAG: update D, Qi, or b based on pressed key\n      .call(d3.drag().on(\"drag\", event => {\n        const dy = event.dy;\n        const dx = event.dx;\n        setPhaseParams(prevParams => {\n          const newParams = {\n            ...prevParams[phase]\n          };\n          if (activeKey === \"d\") {\n            newParams.D = Math.max(0.0001, newParams.D + dy * 0.005);\n          } else if (activeKey === \"q\") {\n            newParams.Qi = Math.max(1, newParams.Qi - dy * 0.5);\n          } else if (activeKey === \"b\") {\n            newParams.b = Math.max(0.01, newParams.b + dx * 0.005);\n          }\n          return {\n            ...prevParams,\n            [phase]: newParams\n          };\n        });\n      }));\n    });\n\n    // 15) Plot forecast lines\n    Object.keys(allForecastPoints).forEach(phase => {\n      const fData = allForecastPoints[phase]; // already date + Q\n      const lineGenForecast = d3.line().x(d => xScale(d.date)).y(d => yScale(d.Q));\n      svg.append(\"path\").datum(fData).attr(\"fill\", \"none\").attr(\"stroke\", lightenColor(colors[phase] || \"#888\", 1.2)).attr(\"stroke-width\", 3).attr(\"d\", lineGenForecast);\n    });\n  }, [localHasData, firstDate, tMax, maxProdDate, data, phasesDetected, phaseData, phaseParams, colors, activeKey, yScaleType, yMultiplier, forecastDays, svgRef, allHistoricalPoints, allForecastPoints, combinedAll]);\n  if (!localHasData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No valid data found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Interactive Decline Curve Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: 800,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: Object.keys(phaseParams).map(phase => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [phase.toUpperCase(), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this), \"\\xA0Qi = \", phaseParams[phase].Qi.toFixed(2), \", \\xA0b = \", phaseParams[phase].b.toFixed(3), \", \\xA0D = \", phaseParams[phase].D.toFixed(4)]\n      }, phase, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Drag Instructions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 46\n        }, this), \"Hold \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 16\n        }, this), \" and drag vertically to adjust decline constant (D).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 86\n        }, this), \"Hold \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Q\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 16\n        }, this), \" and drag vertically to adjust initial rate (Qi).\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 83\n        }, this), \"Hold \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 16\n        }, this), \" and drag horizontally to adjust decline exponent (b).\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Axis Controls:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Y-Axis Scale Type:\\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"yScaleType\",\n              value: \"linear\",\n              checked: yScaleType === \"linear\",\n              onChange: () => setYScaleType(\"linear\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 15\n            }, this), \" Linear\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"yScaleType\",\n              value: \"log\",\n              checked: yScaleType === \"log\",\n              onChange: () => setYScaleType(\"log\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this), \" Log\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Y-Axis Multiplier: \", yMultiplier.toFixed(2), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"3\",\n            step: \"0.05\",\n            value: yMultiplier,\n            onChange: e => setYMultiplier(+e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Forecast Extension (Days): \", forecastDays, /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"180\",\n            step: \"5\",\n            value: forecastDays,\n            onChange: e => setForecastDays(+e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Change Colors:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), Object.keys(colors).map(phase => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '5px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [phase.toUpperCase(), \" Color:\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"color\",\n            value: colors[phase],\n            onChange: e => setColors(prev => ({\n              ...prev,\n              [phase]: e.target.value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this)\n      }, phase, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveDCAChart, \"bQd3LmBACGAeY6+m9HIMZe+G9A8=\");\n_c = InteractiveDCAChart;\nexport default InteractiveDCAChart;\nvar _c;\n$RefreshReg$(_c, \"InteractiveDCAChart\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemo","d3","jsxDEV","_jsxDEV","darkenColor","hex","factor","c","color","r","Math","floor","g","b","formatHex","lightenColor","min","detectDateColumn","headers","candidates","filter","h","lower","toLowerCase","includes","length","detectColumns","phases","forEach","header","oil","water","gas","pressure","fitD","fitData","Qi","bestD","bestError","Infinity","D","error","d","predicted","exp","t","pow","value","InteractiveDCAChart","dataString","startDate","endDate","_s","parsedData","csvParse","err","console","hasData","svgRef","prodDateCol","columns","phasesDetected","filteredData","dataWithDates","map","row","Date","isNaN","getTime","sd","ed","localHasData","firstDate","data","date","Production_Date","phaseData","Object","keys","phase","tMax","max","maxProdDate","initialParams","series","fitSeries","phaseParams","setPhaseParams","colors","setColors","activeKey","setActiveKey","yScaleType","setYScaleType","yMultiplier","setYMultiplier","forecastDays","setForecastDays","handleKeyDown","e","key","handleKeyUp","window","addEventListener","removeEventListener","allHistoricalPoints","allForecastPoints","push","Q","Q_start","forecastStartDate","forecastData","numForecastPts","i","tForecast","Q_forecast","combinedForecast","values","flat","combinedAll","margin","top","right","bottom","left","width","height","svg","select","current","selectAll","remove","minDate","maxDate","extent","minQ","maxQ","minYVal","xScale","scaleTime","domain","range","yScale","scaleLog","scaleLinear","xAxis","axisBottom","tickFormat","timeFormat","yAxis","axisLeft","ticks","append","attr","call","style","points","p","enter","histLineData","numLinePts","frac","tVal","QVal","dateVal","lineGenHist","line","x","y","datum","drag","on","event","dy","dx","prevParams","newParams","fData","lineGenForecast","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","marginTop","toUpperCase","toFixed","type","name","checked","onChange","step","target","marginBottom","prev","_c","$RefreshReg$"],"sources":["C:/Users/lozan/Desktop/Git/dca-spotfire/frontend/src/InteractiveDCAChart.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n// Helper: Darken a HEX color by a given factor.\r\nconst darkenColor = (hex, factor = 0.8) => {\r\n  let c = d3.color(hex);\r\n  if (c) {\r\n    c.r = Math.floor(c.r * factor);\r\n    c.g = Math.floor(c.g * factor);\r\n    c.b = Math.floor(c.b * factor);\r\n    return c.formatHex();\r\n  }\r\n  return hex;\r\n};\r\n\r\n// Helper: Lighten a HEX color by a given factor.\r\nconst lightenColor = (hex, factor = 1.2) => {\r\n  let c = d3.color(hex);\r\n  if (c) {\r\n    c.r = Math.min(255, Math.floor(c.r * factor));\r\n    c.g = Math.min(255, Math.floor(c.g * factor));\r\n    c.b = Math.min(255, Math.floor(c.b * factor));\r\n    return c.formatHex();\r\n  }\r\n  return hex;\r\n};\r\n\r\n// Auto-detect the production date column from common names.\r\nconst detectDateColumn = (headers) => {\r\n  const candidates = headers.filter(h => {\r\n    const lower = h.toLowerCase();\r\n    return (lower.includes(\"prod\") && lower.includes(\"date\")) ||\r\n           lower.includes(\"proddt\") ||\r\n           lower.includes(\"proddttm\") ||\r\n           lower === \"date\" ||\r\n           lower === \"datetime\";\r\n  });\r\n  return candidates.length > 0 ? candidates[0] : \"Production_Date\";\r\n};\r\n\r\n// Auto-detect measurement columns using keywords.\r\nconst detectColumns = (headers) => {\r\n  let phases = {};\r\n  headers.forEach(header => {\r\n    const lower = header.toLowerCase();\r\n    // For oil: prefer \"bopd\", otherwise any \"oil\".\r\n    if (lower.includes(\"bopd\")) {\r\n      phases.oil = header;\r\n    } else if (lower.includes(\"oil\") && !phases.oil) {\r\n      phases.oil = header;\r\n    }\r\n    // For water: prefer \"bwpd\", otherwise any \"water\".\r\n    if (lower.includes(\"bwpd\")) {\r\n      phases.water = header;\r\n    } else if (lower.includes(\"water\") && !phases.water) {\r\n      phases.water = header;\r\n    }\r\n    // For gas: prefer \"mcfd\", otherwise any \"gas\".\r\n    if (lower.includes(\"mcfd\")) {\r\n      phases.gas = header;\r\n    } else if (lower.includes(\"gas\") && !phases.gas) {\r\n      phases.gas = header;\r\n    }\r\n    // For pressure: look for \"pip\", \"pressure\", or \"psi\".\r\n    if ((lower.includes(\"pip\") || lower.includes(\"pressure\") || lower.includes(\"psi\")) && !phases.pressure) {\r\n      phases.pressure = header;\r\n    }\r\n  });\r\n  return phases;\r\n};\r\n\r\n// Brute-force search for best-fit D using the last 60 days.\r\nconst fitD = (fitData, Qi, b) => {\r\n  let bestD = 0.01;\r\n  let bestError = Infinity;\r\n  for (let D = 0.001; D <= 0.1; D += 0.001) {\r\n    let error = 0;\r\n    fitData.forEach(d => {\r\n      const predicted = (b === 0)\r\n        ? Qi * Math.exp(-D * d.t)\r\n        : Qi / Math.pow(1 + b * D * d.t, 1 / b);\r\n      error += Math.pow(predicted - d.value, 2);\r\n    });\r\n    if (error < bestError) {\r\n      bestError = error;\r\n      bestD = D;\r\n    }\r\n  }\r\n  return bestD;\r\n};\r\n\r\nconst InteractiveDCAChart = ({ dataString, startDate, endDate }) => {\r\n  // 1) Parse CSV data\r\n  const parsedData = useMemo(() => {\r\n    try {\r\n      return d3.csvParse(dataString);\r\n    } catch (err) {\r\n      console.error(\"Error parsing CSV:\", err);\r\n      return [];\r\n    }\r\n  }, [dataString]);\r\n\r\n  const hasData = parsedData && parsedData.length > 0;\r\n  const svgRef = useRef(null);\r\n\r\n  // 2) Detect columns\r\n  const prodDateCol = hasData ? detectDateColumn(parsedData.columns) : \"Production_Date\";\r\n  const phasesDetected = hasData ? detectColumns(parsedData.columns) : {};\r\n\r\n  // 3) Filter data by date\r\n  const filteredData = useMemo(() => {\r\n    if (!hasData) return [];\r\n    let dataWithDates = parsedData.map(row => ({\r\n      ...row,\r\n      [prodDateCol]: new Date(row[prodDateCol])\r\n    }));\r\n\r\n    // valid dates only\r\n    dataWithDates = dataWithDates.filter(row => {\r\n      const d = new Date(row[prodDateCol]);\r\n      return !isNaN(d.getTime());\r\n    });\r\n\r\n    // optional date range filter\r\n    if (startDate) {\r\n      const sd = new Date(startDate);\r\n      dataWithDates = dataWithDates.filter(row => row[prodDateCol] >= sd);\r\n    }\r\n    if (endDate) {\r\n      const ed = new Date(endDate);\r\n      dataWithDates = dataWithDates.filter(row => row[prodDateCol] <= ed);\r\n    }\r\n    return dataWithDates;\r\n  }, [parsedData, startDate, endDate, hasData, prodDateCol]);\r\n\r\n  const localHasData = filteredData && filteredData.length > 0;\r\n  const firstDate = localHasData ? filteredData[0][prodDateCol] : new Date();\r\n  // t = days since firstDate\r\n  const data = useMemo(() => {\r\n    if (!localHasData) return [];\r\n    return filteredData.map(row => {\r\n      const date = row[prodDateCol];\r\n      return {\r\n        ...row,\r\n        Production_Date: date,\r\n        t: (date - firstDate) / (1000 * 60 * 60 * 24)\r\n      };\r\n    });\r\n  }, [filteredData, prodDateCol, localHasData, firstDate]);\r\n\r\n  // 4) Build phase data (array of {t, value} for each phase)\r\n  const phaseData = {};\r\n  Object.keys(phasesDetected).forEach(phase => {\r\n    phaseData[phase] = localHasData\r\n      ? data.map(d => ({\r\n          t: d.t,\r\n          value: +d[phasesDetected[phase]]\r\n        }))\r\n      : [];\r\n  });\r\n\r\n  // 5) Calculate tMax, last production date\r\n  const tMax = localHasData ? d3.max(data, d => d.t) : 0;\r\n  const maxProdDate = localHasData\r\n    ? d3.max(data, d => d.Production_Date)\r\n    : new Date();\r\n\r\n  // 6) Fit initial parameters for each phase\r\n  const initialParams = {};\r\n  if (localHasData) {\r\n    Object.keys(phaseData).forEach(phase => {\r\n      const series = phaseData[phase];\r\n      if (!series || !series.length) {\r\n        initialParams[phase] = { Qi: 0, b: 0.9, D: 0.01 };\r\n        return;\r\n      }\r\n      const Qi = series[0].value; // simplistic approach: first data point as Qi\r\n      const b = 0.9;\r\n      // only fit D based on last 60 days\r\n      const fitSeries = series.filter(d => d.t >= Math.max(0, tMax - 60));\r\n      const D = fitSeries.length > 0 ? fitD(fitSeries, Qi, b) : 0.01;\r\n      initialParams[phase] = { Qi, b, D };\r\n    });\r\n  }\r\n\r\n  // 7) State for interactive parameters, chart options\r\n  const [phaseParams, setPhaseParams] = useState(initialParams);\r\n  const [colors, setColors] = useState({\r\n    oil: \"#008000\",\r\n    water: \"#0000ff\",\r\n    gas: \"#ff0000\",\r\n    pressure: \"#000000\"\r\n  });\r\n  const [activeKey, setActiveKey] = useState(null);\r\n  const [yScaleType, setYScaleType] = useState(\"linear\");\r\n  const [yMultiplier, setYMultiplier] = useState(1.1);\r\n  const [forecastDays, setForecastDays] = useState(30);\r\n\r\n  // 8) Hotkey listeners (D, Q, B)\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      const key = e.key.toLowerCase();\r\n      if ([\"d\", \"q\", \"b\"].includes(key)) {\r\n        setActiveKey(key);\r\n      }\r\n    };\r\n    const handleKeyUp = () => {\r\n      setActiveKey(null);\r\n    };\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    window.addEventListener(\"keyup\", handleKeyUp);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n      window.removeEventListener(\"keyup\", handleKeyUp);\r\n    };\r\n  }, []);\r\n\r\n  // 9) Build data arrays for historical & forecast, so we can set the correct domain\r\n  const allHistoricalPoints = [];\r\n  const allForecastPoints = {};\r\n\r\n  Object.keys(phaseData).forEach(phase => {\r\n    // historical\r\n    phaseData[phase].forEach(d => {\r\n      allHistoricalPoints.push({\r\n        date: new Date(firstDate.getTime() + d.t * 24 * 60 * 60 * 1000),\r\n        Q: d.value,\r\n        phase\r\n      });\r\n    });\r\n  });\r\n\r\n  // We'll store forecast arrays in allForecastPoints[phase].\r\n  Object.keys(phaseParams).forEach(phase => {\r\n    const { Qi, b, D } = phaseParams[phase];\r\n    // Calculate Q at tMax as the \"starting\" forecast value\r\n    const Q_start = (b === 0)\r\n      ? Qi * Math.exp(-D * tMax)\r\n      : Qi / Math.pow(1 + b * D * tMax, 1 / b);\r\n\r\n    const forecastStartDate = maxProdDate; // last historical date\r\n    const forecastData = [];\r\n    const numForecastPts = 50; // number of forecast points\r\n\r\n    for (let i = 0; i <= numForecastPts; i++) {\r\n      // tForecast is additional time beyond tMax\r\n      const tForecast = (forecastDays * i) / numForecastPts; \r\n      // forecast production\r\n      const Q_forecast = (b === 0)\r\n        ? Q_start * Math.exp(-D * tForecast)\r\n        : Q_start / Math.pow(1 + b * D * tForecast, 1 / b);\r\n      // date is last prod date + tForecast\r\n      const date = new Date(forecastStartDate.getTime() + tForecast * 24 * 60 * 60 * 1000);\r\n\r\n      forecastData.push({\r\n        date,\r\n        Q: Q_forecast,\r\n        phase\r\n      });\r\n    }\r\n    allForecastPoints[phase] = forecastData;\r\n  });\r\n\r\n  // Flatten them for domain calculations\r\n  const combinedForecast = Object.values(allForecastPoints).flat();\r\n  const combinedAll = [...allHistoricalPoints, ...combinedForecast];\r\n\r\n  // 10) If there's no data, don't render the chart\r\n  useEffect(() => {\r\n    if (!localHasData) return;\r\n\r\n    const margin = { top: 20, right: 30, bottom: 40, left: 60 };\r\n    const width = 800;\r\n    const height = 400;\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    // 11) Determine domain from combined historical + forecast data\r\n    const [minDate, maxDate] = d3.extent(combinedAll, d => d.date);\r\n    const [minQ, maxQ] = d3.extent(combinedAll, d => d.Q);\r\n\r\n    // For safety in log scale, if minQ <= 0, we clamp to something > 0\r\n    const minYVal = minQ <= 0 ? 1e-2 : minQ;\r\n\r\n    // Build xScale\r\n    const xScale = d3.scaleTime()\r\n      .domain([minDate, maxDate])\r\n      .range([margin.left, width - margin.right]);\r\n\r\n    // Build yScale\r\n    let yScale;\r\n    if (yScaleType === \"log\") {\r\n      yScale = d3.scaleLog()\r\n        .domain([Math.max(1e-5, minYVal), maxQ * yMultiplier])\r\n        .range([height - margin.bottom, margin.top]);\r\n    } else {\r\n      yScale = d3.scaleLinear()\r\n        .domain([0, maxQ * yMultiplier])\r\n        .range([height - margin.bottom, margin.top]);\r\n    }\r\n\r\n    // 12) Axes\r\n    const xAxis = d3.axisBottom(xScale)\r\n      .tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\r\n    const yAxis = (yScaleType === \"log\")\r\n      ? d3.axisLeft(yScale).ticks(6, \"~s\")\r\n      : d3.axisLeft(yScale);\r\n\r\n    svg.append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .attr(\"transform\", \"rotate(-45)\")\r\n      .style(\"text-anchor\", \"end\");\r\n\r\n    svg.append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},0)`)\r\n      .call(yAxis);\r\n\r\n    // 13) Plot historical raw data (circles)\r\n    // Group them by phase so we can color appropriately\r\n    Object.keys(phasesDetected).forEach(phase => {\r\n      const points = allHistoricalPoints.filter(p => p.phase === phase);\r\n      svg.selectAll(`circle.hist-${phase}`)\r\n        .data(points)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", `hist-${phase}`)\r\n        .attr(\"cx\", d => xScale(d.date))\r\n        .attr(\"cy\", d => yScale(d.Q))\r\n        .attr(\"r\", 3)\r\n        .attr(\"fill\", colors[phase] || \"#888\");\r\n    });\r\n\r\n    // 14) Plot historical decline lines (draggable)\r\n    Object.keys(phaseParams).forEach(phase => {\r\n      const { Qi, b, D } = phaseParams[phase];\r\n\r\n      // Build line data for \"historical decline\" (0 -> tMax)\r\n      const histLineData = [];\r\n      const numLinePts = 50;\r\n      for (let i = 0; i <= numLinePts; i++) {\r\n        const frac = i / numLinePts;\r\n        const tVal = tMax * frac; // between 0 and tMax\r\n        const QVal = (b === 0)\r\n          ? Qi * Math.exp(-D * tVal)\r\n          : Qi / Math.pow(1 + b * D * tVal, 1 / b);\r\n        // Convert tVal back to actual date\r\n        const dateVal = new Date(firstDate.getTime() + tVal * 24 * 60 * 60 * 1000);\r\n        histLineData.push({ date: dateVal, Q: QVal });\r\n      }\r\n\r\n      const lineGenHist = d3.line()\r\n        .x(d => xScale(d.date))\r\n        .y(d => yScale(d.Q));\r\n\r\n      svg.append(\"path\")\r\n        .datum(histLineData)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", colors[phase] || \"#888888\")\r\n        .attr(\"stroke-width\", 2)\r\n        .style(\"cursor\", \"pointer\")\r\n        .attr(\"d\", lineGenHist)\r\n        // DRAG: update D, Qi, or b based on pressed key\r\n        .call(d3.drag()\r\n          .on(\"drag\", event => {\r\n            const dy = event.dy;\r\n            const dx = event.dx;\r\n            setPhaseParams(prevParams => {\r\n              const newParams = { ...prevParams[phase] };\r\n              if (activeKey === \"d\") {\r\n                newParams.D = Math.max(0.0001, newParams.D + dy * 0.005);\r\n              } else if (activeKey === \"q\") {\r\n                newParams.Qi = Math.max(1, newParams.Qi - dy * 0.5);\r\n              } else if (activeKey === \"b\") {\r\n                newParams.b = Math.max(0.01, newParams.b + dx * 0.005);\r\n              }\r\n              return { ...prevParams, [phase]: newParams };\r\n            });\r\n          })\r\n        );\r\n    });\r\n\r\n    // 15) Plot forecast lines\r\n    Object.keys(allForecastPoints).forEach(phase => {\r\n      const fData = allForecastPoints[phase]; // already date + Q\r\n      const lineGenForecast = d3.line()\r\n        .x(d => xScale(d.date))\r\n        .y(d => yScale(d.Q));\r\n\r\n      svg.append(\"path\")\r\n        .datum(fData)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", lightenColor(colors[phase] || \"#888\", 1.2))\r\n        .attr(\"stroke-width\", 3)\r\n        .attr(\"d\", lineGenForecast);\r\n    });\r\n\r\n  }, [\r\n    localHasData, firstDate, tMax, maxProdDate, data,\r\n    phasesDetected, phaseData, phaseParams,\r\n    colors, activeKey,\r\n    yScaleType, yMultiplier, forecastDays,\r\n    svgRef, allHistoricalPoints, allForecastPoints, combinedAll\r\n  ]);\r\n\r\n  if (!localHasData) {\r\n    return <div>No valid data found.</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Interactive Decline Curve Forecast</h3>\r\n      <svg ref={svgRef} width={800} height={400}></svg>\r\n\r\n      {/* Display the parameters */}\r\n      <div style={{ marginTop: '10px' }}>\r\n        {Object.keys(phaseParams).map(phase => (\r\n          <div key={phase}>\r\n            <strong>{phase.toUpperCase()}:</strong>\r\n            &nbsp;Qi = {phaseParams[phase].Qi.toFixed(2)},\r\n            &nbsp;b = {phaseParams[phase].b.toFixed(3)},\r\n            &nbsp;D = {phaseParams[phase].D.toFixed(4)}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div style={{ marginTop: '10px' }}>\r\n        <p>\r\n          <strong>Drag Instructions:</strong><br />\r\n          Hold <strong>D</strong> and drag vertically to adjust decline constant (D).<br />\r\n          Hold <strong>Q</strong> and drag vertically to adjust initial rate (Qi).<br />\r\n          Hold <strong>B</strong> and drag horizontally to adjust decline exponent (b).\r\n        </p>\r\n      </div>\r\n\r\n      <div style={{ marginTop: '10px' }}>\r\n        <h4>Axis Controls:</h4>\r\n        <div>\r\n          <label>\r\n            Y-Axis Scale Type:&nbsp;\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"yScaleType\"\r\n                value=\"linear\"\r\n                checked={yScaleType === \"linear\"}\r\n                onChange={() => setYScaleType(\"linear\")}\r\n              /> Linear\r\n            </label>\r\n            &nbsp;\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"yScaleType\"\r\n                value=\"log\"\r\n                checked={yScaleType === \"log\"}\r\n                onChange={() => setYScaleType(\"log\")}\r\n              /> Log\r\n            </label>\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label>\r\n            Y-Axis Multiplier: {yMultiplier.toFixed(2)}\r\n            <input\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"3\"\r\n              step=\"0.05\"\r\n              value={yMultiplier}\r\n              onChange={(e) => setYMultiplier(+e.target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label>\r\n            Forecast Extension (Days): {forecastDays}\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"180\"\r\n              step=\"5\"\r\n              value={forecastDays}\r\n              onChange={(e) => setForecastDays(+e.target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: '10px' }}>\r\n        <h4>Change Colors:</h4>\r\n        {Object.keys(colors).map(phase => (\r\n          <div key={phase} style={{ marginBottom: '5px' }}>\r\n            <label>\r\n              {phase.toUpperCase()} Color:&nbsp;\r\n              <input\r\n                type=\"color\"\r\n                value={colors[phase]}\r\n                onChange={(e) => setColors(prev => ({\r\n                  ...prev,\r\n                  [phase]: e.target.value\r\n                }))}\r\n              />\r\n            </label>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InteractiveDCAChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AACnE,OAAO,KAAKC,EAAE,MAAM,IAAI;;AAExB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEC,MAAM,GAAG,GAAG,KAAK;EACzC,IAAIC,CAAC,GAAGN,EAAE,CAACO,KAAK,CAACH,GAAG,CAAC;EACrB,IAAIE,CAAC,EAAE;IACLA,CAAC,CAACE,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACE,CAAC,GAAGH,MAAM,CAAC;IAC9BC,CAAC,CAACK,CAAC,GAAGF,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACK,CAAC,GAAGN,MAAM,CAAC;IAC9BC,CAAC,CAACM,CAAC,GAAGH,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACM,CAAC,GAAGP,MAAM,CAAC;IAC9B,OAAOC,CAAC,CAACO,SAAS,CAAC,CAAC;EACtB;EACA,OAAOT,GAAG;AACZ,CAAC;;AAED;AACA,MAAMU,YAAY,GAAGA,CAACV,GAAG,EAAEC,MAAM,GAAG,GAAG,KAAK;EAC1C,IAAIC,CAAC,GAAGN,EAAE,CAACO,KAAK,CAACH,GAAG,CAAC;EACrB,IAAIE,CAAC,EAAE;IACLA,CAAC,CAACE,CAAC,GAAGC,IAAI,CAACM,GAAG,CAAC,GAAG,EAAEN,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACE,CAAC,GAAGH,MAAM,CAAC,CAAC;IAC7CC,CAAC,CAACK,CAAC,GAAGF,IAAI,CAACM,GAAG,CAAC,GAAG,EAAEN,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACK,CAAC,GAAGN,MAAM,CAAC,CAAC;IAC7CC,CAAC,CAACM,CAAC,GAAGH,IAAI,CAACM,GAAG,CAAC,GAAG,EAAEN,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACM,CAAC,GAAGP,MAAM,CAAC,CAAC;IAC7C,OAAOC,CAAC,CAACO,SAAS,CAAC,CAAC;EACtB;EACA,OAAOT,GAAG;AACZ,CAAC;;AAED;AACA,MAAMY,gBAAgB,GAAIC,OAAO,IAAK;EACpC,MAAMC,UAAU,GAAGD,OAAO,CAACE,MAAM,CAACC,CAAC,IAAI;IACrC,MAAMC,KAAK,GAAGD,CAAC,CAACE,WAAW,CAAC,CAAC;IAC7B,OAAQD,KAAK,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,KAAK,CAACE,QAAQ,CAAC,MAAM,CAAC,IACjDF,KAAK,CAACE,QAAQ,CAAC,QAAQ,CAAC,IACxBF,KAAK,CAACE,QAAQ,CAAC,UAAU,CAAC,IAC1BF,KAAK,KAAK,MAAM,IAChBA,KAAK,KAAK,UAAU;EAC7B,CAAC,CAAC;EACF,OAAOH,UAAU,CAACM,MAAM,GAAG,CAAC,GAAGN,UAAU,CAAC,CAAC,CAAC,GAAG,iBAAiB;AAClE,CAAC;;AAED;AACA,MAAMO,aAAa,GAAIR,OAAO,IAAK;EACjC,IAAIS,MAAM,GAAG,CAAC,CAAC;EACfT,OAAO,CAACU,OAAO,CAACC,MAAM,IAAI;IACxB,MAAMP,KAAK,GAAGO,MAAM,CAACN,WAAW,CAAC,CAAC;IAClC;IACA,IAAID,KAAK,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC1BG,MAAM,CAACG,GAAG,GAAGD,MAAM;IACrB,CAAC,MAAM,IAAIP,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC,IAAI,CAACG,MAAM,CAACG,GAAG,EAAE;MAC/CH,MAAM,CAACG,GAAG,GAAGD,MAAM;IACrB;IACA;IACA,IAAIP,KAAK,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC1BG,MAAM,CAACI,KAAK,GAAGF,MAAM;IACvB,CAAC,MAAM,IAAIP,KAAK,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAI,CAACG,MAAM,CAACI,KAAK,EAAE;MACnDJ,MAAM,CAACI,KAAK,GAAGF,MAAM;IACvB;IACA;IACA,IAAIP,KAAK,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC1BG,MAAM,CAACK,GAAG,GAAGH,MAAM;IACrB,CAAC,MAAM,IAAIP,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC,IAAI,CAACG,MAAM,CAACK,GAAG,EAAE;MAC/CL,MAAM,CAACK,GAAG,GAAGH,MAAM;IACrB;IACA;IACA,IAAI,CAACP,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC,IAAIF,KAAK,CAACE,QAAQ,CAAC,UAAU,CAAC,IAAIF,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAACG,MAAM,CAACM,QAAQ,EAAE;MACtGN,MAAM,CAACM,QAAQ,GAAGJ,MAAM;IAC1B;EACF,CAAC,CAAC;EACF,OAAOF,MAAM;AACf,CAAC;;AAED;AACA,MAAMO,IAAI,GAAGA,CAACC,OAAO,EAAEC,EAAE,EAAEvB,CAAC,KAAK;EAC/B,IAAIwB,KAAK,GAAG,IAAI;EAChB,IAAIC,SAAS,GAAGC,QAAQ;EACxB,KAAK,IAAIC,CAAC,GAAG,KAAK,EAAEA,CAAC,IAAI,GAAG,EAAEA,CAAC,IAAI,KAAK,EAAE;IACxC,IAAIC,KAAK,GAAG,CAAC;IACbN,OAAO,CAACP,OAAO,CAACc,CAAC,IAAI;MACnB,MAAMC,SAAS,GAAI9B,CAAC,KAAK,CAAC,GACtBuB,EAAE,GAAG1B,IAAI,CAACkC,GAAG,CAAC,CAACJ,CAAC,GAAGE,CAAC,CAACG,CAAC,CAAC,GACvBT,EAAE,GAAG1B,IAAI,CAACoC,GAAG,CAAC,CAAC,GAAGjC,CAAC,GAAG2B,CAAC,GAAGE,CAAC,CAACG,CAAC,EAAE,CAAC,GAAGhC,CAAC,CAAC;MACzC4B,KAAK,IAAI/B,IAAI,CAACoC,GAAG,CAACH,SAAS,GAAGD,CAAC,CAACK,KAAK,EAAE,CAAC,CAAC;IAC3C,CAAC,CAAC;IACF,IAAIN,KAAK,GAAGH,SAAS,EAAE;MACrBA,SAAS,GAAGG,KAAK;MACjBJ,KAAK,GAAGG,CAAC;IACX;EACF;EACA,OAAOH,KAAK;AACd,CAAC;AAED,MAAMW,mBAAmB,GAAGA,CAAC;EAAEC,UAAU;EAAEC,SAAS;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClE;EACA,MAAMC,UAAU,GAAGrD,OAAO,CAAC,MAAM;IAC/B,IAAI;MACF,OAAOC,EAAE,CAACqD,QAAQ,CAACL,UAAU,CAAC;IAChC,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZC,OAAO,CAACf,KAAK,CAAC,oBAAoB,EAAEc,GAAG,CAAC;MACxC,OAAO,EAAE;IACX;EACF,CAAC,EAAE,CAACN,UAAU,CAAC,CAAC;EAEhB,MAAMQ,OAAO,GAAGJ,UAAU,IAAIA,UAAU,CAAC5B,MAAM,GAAG,CAAC;EACnD,MAAMiC,MAAM,GAAG7D,MAAM,CAAC,IAAI,CAAC;;EAE3B;EACA,MAAM8D,WAAW,GAAGF,OAAO,GAAGxC,gBAAgB,CAACoC,UAAU,CAACO,OAAO,CAAC,GAAG,iBAAiB;EACtF,MAAMC,cAAc,GAAGJ,OAAO,GAAG/B,aAAa,CAAC2B,UAAU,CAACO,OAAO,CAAC,GAAG,CAAC,CAAC;;EAEvE;EACA,MAAME,YAAY,GAAG9D,OAAO,CAAC,MAAM;IACjC,IAAI,CAACyD,OAAO,EAAE,OAAO,EAAE;IACvB,IAAIM,aAAa,GAAGV,UAAU,CAACW,GAAG,CAACC,GAAG,KAAK;MACzC,GAAGA,GAAG;MACN,CAACN,WAAW,GAAG,IAAIO,IAAI,CAACD,GAAG,CAACN,WAAW,CAAC;IAC1C,CAAC,CAAC,CAAC;;IAEH;IACAI,aAAa,GAAGA,aAAa,CAAC3C,MAAM,CAAC6C,GAAG,IAAI;MAC1C,MAAMvB,CAAC,GAAG,IAAIwB,IAAI,CAACD,GAAG,CAACN,WAAW,CAAC,CAAC;MACpC,OAAO,CAACQ,KAAK,CAACzB,CAAC,CAAC0B,OAAO,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC;;IAEF;IACA,IAAIlB,SAAS,EAAE;MACb,MAAMmB,EAAE,GAAG,IAAIH,IAAI,CAAChB,SAAS,CAAC;MAC9Ba,aAAa,GAAGA,aAAa,CAAC3C,MAAM,CAAC6C,GAAG,IAAIA,GAAG,CAACN,WAAW,CAAC,IAAIU,EAAE,CAAC;IACrE;IACA,IAAIlB,OAAO,EAAE;MACX,MAAMmB,EAAE,GAAG,IAAIJ,IAAI,CAACf,OAAO,CAAC;MAC5BY,aAAa,GAAGA,aAAa,CAAC3C,MAAM,CAAC6C,GAAG,IAAIA,GAAG,CAACN,WAAW,CAAC,IAAIW,EAAE,CAAC;IACrE;IACA,OAAOP,aAAa;EACtB,CAAC,EAAE,CAACV,UAAU,EAAEH,SAAS,EAAEC,OAAO,EAAEM,OAAO,EAAEE,WAAW,CAAC,CAAC;EAE1D,MAAMY,YAAY,GAAGT,YAAY,IAAIA,YAAY,CAACrC,MAAM,GAAG,CAAC;EAC5D,MAAM+C,SAAS,GAAGD,YAAY,GAAGT,YAAY,CAAC,CAAC,CAAC,CAACH,WAAW,CAAC,GAAG,IAAIO,IAAI,CAAC,CAAC;EAC1E;EACA,MAAMO,IAAI,GAAGzE,OAAO,CAAC,MAAM;IACzB,IAAI,CAACuE,YAAY,EAAE,OAAO,EAAE;IAC5B,OAAOT,YAAY,CAACE,GAAG,CAACC,GAAG,IAAI;MAC7B,MAAMS,IAAI,GAAGT,GAAG,CAACN,WAAW,CAAC;MAC7B,OAAO;QACL,GAAGM,GAAG;QACNU,eAAe,EAAED,IAAI;QACrB7B,CAAC,EAAE,CAAC6B,IAAI,GAAGF,SAAS,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;MAC9C,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,YAAY,EAAEH,WAAW,EAAEY,YAAY,EAAEC,SAAS,CAAC,CAAC;;EAExD;EACA,MAAMI,SAAS,GAAG,CAAC,CAAC;EACpBC,MAAM,CAACC,IAAI,CAACjB,cAAc,CAAC,CAACjC,OAAO,CAACmD,KAAK,IAAI;IAC3CH,SAAS,CAACG,KAAK,CAAC,GAAGR,YAAY,GAC3BE,IAAI,CAACT,GAAG,CAACtB,CAAC,KAAK;MACbG,CAAC,EAAEH,CAAC,CAACG,CAAC;MACNE,KAAK,EAAE,CAACL,CAAC,CAACmB,cAAc,CAACkB,KAAK,CAAC;IACjC,CAAC,CAAC,CAAC,GACH,EAAE;EACR,CAAC,CAAC;;EAEF;EACA,MAAMC,IAAI,GAAGT,YAAY,GAAGtE,EAAE,CAACgF,GAAG,CAACR,IAAI,EAAE/B,CAAC,IAAIA,CAAC,CAACG,CAAC,CAAC,GAAG,CAAC;EACtD,MAAMqC,WAAW,GAAGX,YAAY,GAC5BtE,EAAE,CAACgF,GAAG,CAACR,IAAI,EAAE/B,CAAC,IAAIA,CAAC,CAACiC,eAAe,CAAC,GACpC,IAAIT,IAAI,CAAC,CAAC;;EAEd;EACA,MAAMiB,aAAa,GAAG,CAAC,CAAC;EACxB,IAAIZ,YAAY,EAAE;IAChBM,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAAChD,OAAO,CAACmD,KAAK,IAAI;MACtC,MAAMK,MAAM,GAAGR,SAAS,CAACG,KAAK,CAAC;MAC/B,IAAI,CAACK,MAAM,IAAI,CAACA,MAAM,CAAC3D,MAAM,EAAE;QAC7B0D,aAAa,CAACJ,KAAK,CAAC,GAAG;UAAE3C,EAAE,EAAE,CAAC;UAAEvB,CAAC,EAAE,GAAG;UAAE2B,CAAC,EAAE;QAAK,CAAC;QACjD;MACF;MACA,MAAMJ,EAAE,GAAGgD,MAAM,CAAC,CAAC,CAAC,CAACrC,KAAK,CAAC,CAAC;MAC5B,MAAMlC,CAAC,GAAG,GAAG;MACb;MACA,MAAMwE,SAAS,GAAGD,MAAM,CAAChE,MAAM,CAACsB,CAAC,IAAIA,CAAC,CAACG,CAAC,IAAInC,IAAI,CAACuE,GAAG,CAAC,CAAC,EAAED,IAAI,GAAG,EAAE,CAAC,CAAC;MACnE,MAAMxC,CAAC,GAAG6C,SAAS,CAAC5D,MAAM,GAAG,CAAC,GAAGS,IAAI,CAACmD,SAAS,EAAEjD,EAAE,EAAEvB,CAAC,CAAC,GAAG,IAAI;MAC9DsE,aAAa,CAACJ,KAAK,CAAC,GAAG;QAAE3C,EAAE;QAAEvB,CAAC;QAAE2B;MAAE,CAAC;IACrC,CAAC,CAAC;EACJ;;EAEA;EACA,MAAM,CAAC8C,WAAW,EAAEC,cAAc,CAAC,GAAGxF,QAAQ,CAACoF,aAAa,CAAC;EAC7D,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAG1F,QAAQ,CAAC;IACnC+B,GAAG,EAAE,SAAS;IACdC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAE,SAAS;IACdC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAM,CAACyD,SAAS,EAAEC,YAAY,CAAC,GAAG5F,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC6F,UAAU,EAAEC,aAAa,CAAC,GAAG9F,QAAQ,CAAC,QAAQ,CAAC;EACtD,MAAM,CAAC+F,WAAW,EAAEC,cAAc,CAAC,GAAGhG,QAAQ,CAAC,GAAG,CAAC;EACnD,MAAM,CAACiG,YAAY,EAAEC,eAAe,CAAC,GAAGlG,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACAD,SAAS,CAAC,MAAM;IACd,MAAMoG,aAAa,GAAIC,CAAC,IAAK;MAC3B,MAAMC,GAAG,GAAGD,CAAC,CAACC,GAAG,CAAC7E,WAAW,CAAC,CAAC;MAC/B,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAAC4E,GAAG,CAAC,EAAE;QACjCT,YAAY,CAACS,GAAG,CAAC;MACnB;IACF,CAAC;IACD,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxBV,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC;IACDW,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEL,aAAa,CAAC;IACjDI,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEF,WAAW,CAAC;IAC7C,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEN,aAAa,CAAC;MACpDI,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEH,WAAW,CAAC;IAClD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,mBAAmB,GAAG,EAAE;EAC9B,MAAMC,iBAAiB,GAAG,CAAC,CAAC;EAE5B7B,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAAChD,OAAO,CAACmD,KAAK,IAAI;IACtC;IACAH,SAAS,CAACG,KAAK,CAAC,CAACnD,OAAO,CAACc,CAAC,IAAI;MAC5B+D,mBAAmB,CAACE,IAAI,CAAC;QACvBjC,IAAI,EAAE,IAAIR,IAAI,CAACM,SAAS,CAACJ,OAAO,CAAC,CAAC,GAAG1B,CAAC,CAACG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAC/D+D,CAAC,EAAElE,CAAC,CAACK,KAAK;QACVgC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACAF,MAAM,CAACC,IAAI,CAACQ,WAAW,CAAC,CAAC1D,OAAO,CAACmD,KAAK,IAAI;IACxC,MAAM;MAAE3C,EAAE;MAAEvB,CAAC;MAAE2B;IAAE,CAAC,GAAG8C,WAAW,CAACP,KAAK,CAAC;IACvC;IACA,MAAM8B,OAAO,GAAIhG,CAAC,KAAK,CAAC,GACpBuB,EAAE,GAAG1B,IAAI,CAACkC,GAAG,CAAC,CAACJ,CAAC,GAAGwC,IAAI,CAAC,GACxB5C,EAAE,GAAG1B,IAAI,CAACoC,GAAG,CAAC,CAAC,GAAGjC,CAAC,GAAG2B,CAAC,GAAGwC,IAAI,EAAE,CAAC,GAAGnE,CAAC,CAAC;IAE1C,MAAMiG,iBAAiB,GAAG5B,WAAW,CAAC,CAAC;IACvC,MAAM6B,YAAY,GAAG,EAAE;IACvB,MAAMC,cAAc,GAAG,EAAE,CAAC,CAAC;;IAE3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAID,cAAc,EAAEC,CAAC,EAAE,EAAE;MACxC;MACA,MAAMC,SAAS,GAAIlB,YAAY,GAAGiB,CAAC,GAAID,cAAc;MACrD;MACA,MAAMG,UAAU,GAAItG,CAAC,KAAK,CAAC,GACvBgG,OAAO,GAAGnG,IAAI,CAACkC,GAAG,CAAC,CAACJ,CAAC,GAAG0E,SAAS,CAAC,GAClCL,OAAO,GAAGnG,IAAI,CAACoC,GAAG,CAAC,CAAC,GAAGjC,CAAC,GAAG2B,CAAC,GAAG0E,SAAS,EAAE,CAAC,GAAGrG,CAAC,CAAC;MACpD;MACA,MAAM6D,IAAI,GAAG,IAAIR,IAAI,CAAC4C,iBAAiB,CAAC1C,OAAO,CAAC,CAAC,GAAG8C,SAAS,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;MAEpFH,YAAY,CAACJ,IAAI,CAAC;QAChBjC,IAAI;QACJkC,CAAC,EAAEO,UAAU;QACbpC;MACF,CAAC,CAAC;IACJ;IACA2B,iBAAiB,CAAC3B,KAAK,CAAC,GAAGgC,YAAY;EACzC,CAAC,CAAC;;EAEF;EACA,MAAMK,gBAAgB,GAAGvC,MAAM,CAACwC,MAAM,CAACX,iBAAiB,CAAC,CAACY,IAAI,CAAC,CAAC;EAChE,MAAMC,WAAW,GAAG,CAAC,GAAGd,mBAAmB,EAAE,GAAGW,gBAAgB,CAAC;;EAEjE;EACAtH,SAAS,CAAC,MAAM;IACd,IAAI,CAACyE,YAAY,EAAE;IAEnB,MAAMiD,MAAM,GAAG;MAAEC,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;IAC3D,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,GAAG,GAAG9H,EAAE,CAAC+H,MAAM,CAACtE,MAAM,CAACuE,OAAO,CAAC;IACrCF,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;;IAE3B;IACA,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAGpI,EAAE,CAACqI,MAAM,CAACf,WAAW,EAAE7E,CAAC,IAAIA,CAAC,CAACgC,IAAI,CAAC;IAC9D,MAAM,CAAC6D,IAAI,EAAEC,IAAI,CAAC,GAAGvI,EAAE,CAACqI,MAAM,CAACf,WAAW,EAAE7E,CAAC,IAAIA,CAAC,CAACkE,CAAC,CAAC;;IAErD;IACA,MAAM6B,OAAO,GAAGF,IAAI,IAAI,CAAC,GAAG,IAAI,GAAGA,IAAI;;IAEvC;IACA,MAAMG,MAAM,GAAGzI,EAAE,CAAC0I,SAAS,CAAC,CAAC,CAC1BC,MAAM,CAAC,CAACR,OAAO,EAAEC,OAAO,CAAC,CAAC,CAC1BQ,KAAK,CAAC,CAACrB,MAAM,CAACI,IAAI,EAAEC,KAAK,GAAGL,MAAM,CAACE,KAAK,CAAC,CAAC;;IAE7C;IACA,IAAIoB,MAAM;IACV,IAAIlD,UAAU,KAAK,KAAK,EAAE;MACxBkD,MAAM,GAAG7I,EAAE,CAAC8I,QAAQ,CAAC,CAAC,CACnBH,MAAM,CAAC,CAAClI,IAAI,CAACuE,GAAG,CAAC,IAAI,EAAEwD,OAAO,CAAC,EAAED,IAAI,GAAG1C,WAAW,CAAC,CAAC,CACrD+C,KAAK,CAAC,CAACf,MAAM,GAAGN,MAAM,CAACG,MAAM,EAAEH,MAAM,CAACC,GAAG,CAAC,CAAC;IAChD,CAAC,MAAM;MACLqB,MAAM,GAAG7I,EAAE,CAAC+I,WAAW,CAAC,CAAC,CACtBJ,MAAM,CAAC,CAAC,CAAC,EAAEJ,IAAI,GAAG1C,WAAW,CAAC,CAAC,CAC/B+C,KAAK,CAAC,CAACf,MAAM,GAAGN,MAAM,CAACG,MAAM,EAAEH,MAAM,CAACC,GAAG,CAAC,CAAC;IAChD;;IAEA;IACA,MAAMwB,KAAK,GAAGhJ,EAAE,CAACiJ,UAAU,CAACR,MAAM,CAAC,CAChCS,UAAU,CAAClJ,EAAE,CAACmJ,UAAU,CAAC,UAAU,CAAC,CAAC;IACxC,MAAMC,KAAK,GAAIzD,UAAU,KAAK,KAAK,GAC/B3F,EAAE,CAACqJ,QAAQ,CAACR,MAAM,CAAC,CAACS,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAClCtJ,EAAE,CAACqJ,QAAQ,CAACR,MAAM,CAAC;IAEvBf,GAAG,CAACyB,MAAM,CAAC,GAAG,CAAC,CACZC,IAAI,CAAC,WAAW,EAAE,eAAe3B,MAAM,GAAGN,MAAM,CAACG,MAAM,GAAG,CAAC,CAC3D+B,IAAI,CAACT,KAAK,CAAC,CACXf,SAAS,CAAC,MAAM,CAAC,CACjBuB,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAChCE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC;IAE9B5B,GAAG,CAACyB,MAAM,CAAC,GAAG,CAAC,CACZC,IAAI,CAAC,WAAW,EAAE,aAAajC,MAAM,CAACI,IAAI,KAAK,CAAC,CAChD8B,IAAI,CAACL,KAAK,CAAC;;IAEd;IACA;IACAxE,MAAM,CAACC,IAAI,CAACjB,cAAc,CAAC,CAACjC,OAAO,CAACmD,KAAK,IAAI;MAC3C,MAAM6E,MAAM,GAAGnD,mBAAmB,CAACrF,MAAM,CAACyI,CAAC,IAAIA,CAAC,CAAC9E,KAAK,KAAKA,KAAK,CAAC;MACjEgD,GAAG,CAACG,SAAS,CAAC,eAAenD,KAAK,EAAE,CAAC,CAClCN,IAAI,CAACmF,MAAM,CAAC,CACZE,KAAK,CAAC,CAAC,CACPN,MAAM,CAAC,QAAQ,CAAC,CAChBC,IAAI,CAAC,OAAO,EAAE,QAAQ1E,KAAK,EAAE,CAAC,CAC9B0E,IAAI,CAAC,IAAI,EAAE/G,CAAC,IAAIgG,MAAM,CAAChG,CAAC,CAACgC,IAAI,CAAC,CAAC,CAC/B+E,IAAI,CAAC,IAAI,EAAE/G,CAAC,IAAIoG,MAAM,CAACpG,CAAC,CAACkE,CAAC,CAAC,CAAC,CAC5B6C,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAEjE,MAAM,CAACT,KAAK,CAAC,IAAI,MAAM,CAAC;IAC1C,CAAC,CAAC;;IAEF;IACAF,MAAM,CAACC,IAAI,CAACQ,WAAW,CAAC,CAAC1D,OAAO,CAACmD,KAAK,IAAI;MACxC,MAAM;QAAE3C,EAAE;QAAEvB,CAAC;QAAE2B;MAAE,CAAC,GAAG8C,WAAW,CAACP,KAAK,CAAC;;MAEvC;MACA,MAAMgF,YAAY,GAAG,EAAE;MACvB,MAAMC,UAAU,GAAG,EAAE;MACrB,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI+C,UAAU,EAAE/C,CAAC,EAAE,EAAE;QACpC,MAAMgD,IAAI,GAAGhD,CAAC,GAAG+C,UAAU;QAC3B,MAAME,IAAI,GAAGlF,IAAI,GAAGiF,IAAI,CAAC,CAAC;QAC1B,MAAME,IAAI,GAAItJ,CAAC,KAAK,CAAC,GACjBuB,EAAE,GAAG1B,IAAI,CAACkC,GAAG,CAAC,CAACJ,CAAC,GAAG0H,IAAI,CAAC,GACxB9H,EAAE,GAAG1B,IAAI,CAACoC,GAAG,CAAC,CAAC,GAAGjC,CAAC,GAAG2B,CAAC,GAAG0H,IAAI,EAAE,CAAC,GAAGrJ,CAAC,CAAC;QAC1C;QACA,MAAMuJ,OAAO,GAAG,IAAIlG,IAAI,CAACM,SAAS,CAACJ,OAAO,CAAC,CAAC,GAAG8F,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAC1EH,YAAY,CAACpD,IAAI,CAAC;UAAEjC,IAAI,EAAE0F,OAAO;UAAExD,CAAC,EAAEuD;QAAK,CAAC,CAAC;MAC/C;MAEA,MAAME,WAAW,GAAGpK,EAAE,CAACqK,IAAI,CAAC,CAAC,CAC1BC,CAAC,CAAC7H,CAAC,IAAIgG,MAAM,CAAChG,CAAC,CAACgC,IAAI,CAAC,CAAC,CACtB8F,CAAC,CAAC9H,CAAC,IAAIoG,MAAM,CAACpG,CAAC,CAACkE,CAAC,CAAC,CAAC;MAEtBmB,GAAG,CAACyB,MAAM,CAAC,MAAM,CAAC,CACfiB,KAAK,CAACV,YAAY,CAAC,CACnBN,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,QAAQ,EAAEjE,MAAM,CAACT,KAAK,CAAC,IAAI,SAAS,CAAC,CAC1C0E,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBE,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAC1BF,IAAI,CAAC,GAAG,EAAEY,WAAW;MACtB;MAAA,CACCX,IAAI,CAACzJ,EAAE,CAACyK,IAAI,CAAC,CAAC,CACZC,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAI;QACnB,MAAMC,EAAE,GAAGD,KAAK,CAACC,EAAE;QACnB,MAAMC,EAAE,GAAGF,KAAK,CAACE,EAAE;QACnBvF,cAAc,CAACwF,UAAU,IAAI;UAC3B,MAAMC,SAAS,GAAG;YAAE,GAAGD,UAAU,CAAChG,KAAK;UAAE,CAAC;UAC1C,IAAIW,SAAS,KAAK,GAAG,EAAE;YACrBsF,SAAS,CAACxI,CAAC,GAAG9B,IAAI,CAACuE,GAAG,CAAC,MAAM,EAAE+F,SAAS,CAACxI,CAAC,GAAGqI,EAAE,GAAG,KAAK,CAAC;UAC1D,CAAC,MAAM,IAAInF,SAAS,KAAK,GAAG,EAAE;YAC5BsF,SAAS,CAAC5I,EAAE,GAAG1B,IAAI,CAACuE,GAAG,CAAC,CAAC,EAAE+F,SAAS,CAAC5I,EAAE,GAAGyI,EAAE,GAAG,GAAG,CAAC;UACrD,CAAC,MAAM,IAAInF,SAAS,KAAK,GAAG,EAAE;YAC5BsF,SAAS,CAACnK,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAAC,IAAI,EAAE+F,SAAS,CAACnK,CAAC,GAAGiK,EAAE,GAAG,KAAK,CAAC;UACxD;UACA,OAAO;YAAE,GAAGC,UAAU;YAAE,CAAChG,KAAK,GAAGiG;UAAU,CAAC;QAC9C,CAAC,CAAC;MACJ,CAAC,CACH,CAAC;IACL,CAAC,CAAC;;IAEF;IACAnG,MAAM,CAACC,IAAI,CAAC4B,iBAAiB,CAAC,CAAC9E,OAAO,CAACmD,KAAK,IAAI;MAC9C,MAAMkG,KAAK,GAAGvE,iBAAiB,CAAC3B,KAAK,CAAC,CAAC,CAAC;MACxC,MAAMmG,eAAe,GAAGjL,EAAE,CAACqK,IAAI,CAAC,CAAC,CAC9BC,CAAC,CAAC7H,CAAC,IAAIgG,MAAM,CAAChG,CAAC,CAACgC,IAAI,CAAC,CAAC,CACtB8F,CAAC,CAAC9H,CAAC,IAAIoG,MAAM,CAACpG,CAAC,CAACkE,CAAC,CAAC,CAAC;MAEtBmB,GAAG,CAACyB,MAAM,CAAC,MAAM,CAAC,CACfiB,KAAK,CAACQ,KAAK,CAAC,CACZxB,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,QAAQ,EAAE1I,YAAY,CAACyE,MAAM,CAACT,KAAK,CAAC,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAC1D0E,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,GAAG,EAAEyB,eAAe,CAAC;IAC/B,CAAC,CAAC;EAEJ,CAAC,EAAE,CACD3G,YAAY,EAAEC,SAAS,EAAEQ,IAAI,EAAEE,WAAW,EAAET,IAAI,EAChDZ,cAAc,EAAEe,SAAS,EAAEU,WAAW,EACtCE,MAAM,EAAEE,SAAS,EACjBE,UAAU,EAAEE,WAAW,EAAEE,YAAY,EACrCtC,MAAM,EAAE+C,mBAAmB,EAAEC,iBAAiB,EAAEa,WAAW,CAC5D,CAAC;EAEF,IAAI,CAAChD,YAAY,EAAE;IACjB,oBAAOpE,OAAA;MAAAgL,QAAA,EAAK;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;EAEA,oBACEpL,OAAA;IAAAgL,QAAA,gBACEhL,OAAA;MAAAgL,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3CpL,OAAA;MAAKqL,GAAG,EAAE9H,MAAO;MAACmE,KAAK,EAAE,GAAI;MAACC,MAAM,EAAE;IAAI;MAAAsD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAGjDpL,OAAA;MAAKwJ,KAAK,EAAE;QAAE8B,SAAS,EAAE;MAAO,CAAE;MAAAN,QAAA,EAC/BtG,MAAM,CAACC,IAAI,CAACQ,WAAW,CAAC,CAACtB,GAAG,CAACe,KAAK,iBACjC5E,OAAA;QAAAgL,QAAA,gBACEhL,OAAA;UAAAgL,QAAA,GAASpG,KAAK,CAAC2G,WAAW,CAAC,CAAC,EAAC,GAAC;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,aAC5B,EAACjG,WAAW,CAACP,KAAK,CAAC,CAAC3C,EAAE,CAACuJ,OAAO,CAAC,CAAC,CAAC,EAAC,YACnC,EAACrG,WAAW,CAACP,KAAK,CAAC,CAAClE,CAAC,CAAC8K,OAAO,CAAC,CAAC,CAAC,EAAC,YACjC,EAACrG,WAAW,CAACP,KAAK,CAAC,CAACvC,CAAC,CAACmJ,OAAO,CAAC,CAAC,CAAC;MAAA,GAJlC5G,KAAK;QAAAqG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENpL,OAAA;MAAKwJ,KAAK,EAAE;QAAE8B,SAAS,EAAE;MAAO,CAAE;MAAAN,QAAA,eAChChL,OAAA;QAAAgL,QAAA,gBACEhL,OAAA;UAAAgL,QAAA,EAAQ;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAAApL,OAAA;UAAAiL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,SACpC,eAAApL,OAAA;UAAAgL,QAAA,EAAQ;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,wDAAoD,eAAApL,OAAA;UAAAiL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,SAC5E,eAAApL,OAAA;UAAAgL,QAAA,EAAQ;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,qDAAiD,eAAApL,OAAA;UAAAiL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,SACzE,eAAApL,OAAA;UAAAgL,QAAA,EAAQ;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,0DACzB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENpL,OAAA;MAAKwJ,KAAK,EAAE;QAAE8B,SAAS,EAAE;MAAO,CAAE;MAAAN,QAAA,gBAChChL,OAAA;QAAAgL,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBpL,OAAA;QAAAgL,QAAA,eACEhL,OAAA;UAAAgL,QAAA,GAAO,wBAEL,eAAAhL,OAAA;YAAAgL,QAAA,gBACEhL,OAAA;cACEyL,IAAI,EAAC,OAAO;cACZC,IAAI,EAAC,YAAY;cACjB9I,KAAK,EAAC,QAAQ;cACd+I,OAAO,EAAElG,UAAU,KAAK,QAAS;cACjCmG,QAAQ,EAAEA,CAAA,KAAMlG,aAAa,CAAC,QAAQ;YAAE;cAAAuF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzC,CAAC,WACJ;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,QAER,eAAApL,OAAA;YAAAgL,QAAA,gBACEhL,OAAA;cACEyL,IAAI,EAAC,OAAO;cACZC,IAAI,EAAC,YAAY;cACjB9I,KAAK,EAAC,KAAK;cACX+I,OAAO,EAAElG,UAAU,KAAK,KAAM;cAC9BmG,QAAQ,EAAEA,CAAA,KAAMlG,aAAa,CAAC,KAAK;YAAE;cAAAuF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtC,CAAC,QACJ;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNpL,OAAA;QAAAgL,QAAA,eACEhL,OAAA;UAAAgL,QAAA,GAAO,qBACc,EAACrF,WAAW,CAAC6F,OAAO,CAAC,CAAC,CAAC,eAC1CxL,OAAA;YACEyL,IAAI,EAAC,OAAO;YACZ5K,GAAG,EAAC,GAAG;YACPiE,GAAG,EAAC,GAAG;YACP+G,IAAI,EAAC,MAAM;YACXjJ,KAAK,EAAE+C,WAAY;YACnBiG,QAAQ,EAAG5F,CAAC,IAAKJ,cAAc,CAAC,CAACI,CAAC,CAAC8F,MAAM,CAAClJ,KAAK;UAAE;YAAAqI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNpL,OAAA;QAAAgL,QAAA,eACEhL,OAAA;UAAAgL,QAAA,GAAO,6BACsB,EAACnF,YAAY,eACxC7F,OAAA;YACEyL,IAAI,EAAC,OAAO;YACZ5K,GAAG,EAAC,GAAG;YACPiE,GAAG,EAAC,KAAK;YACT+G,IAAI,EAAC,GAAG;YACRjJ,KAAK,EAAEiD,YAAa;YACpB+F,QAAQ,EAAG5F,CAAC,IAAKF,eAAe,CAAC,CAACE,CAAC,CAAC8F,MAAM,CAAClJ,KAAK;UAAE;YAAAqI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENpL,OAAA;MAAKwJ,KAAK,EAAE;QAAE8B,SAAS,EAAE;MAAO,CAAE;MAAAN,QAAA,gBAChChL,OAAA;QAAAgL,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACtB1G,MAAM,CAACC,IAAI,CAACU,MAAM,CAAC,CAACxB,GAAG,CAACe,KAAK,iBAC5B5E,OAAA;QAAiBwJ,KAAK,EAAE;UAAEuC,YAAY,EAAE;QAAM,CAAE;QAAAf,QAAA,eAC9ChL,OAAA;UAAAgL,QAAA,GACGpG,KAAK,CAAC2G,WAAW,CAAC,CAAC,EAAC,aACrB,eAAAvL,OAAA;YACEyL,IAAI,EAAC,OAAO;YACZ7I,KAAK,EAAEyC,MAAM,CAACT,KAAK,CAAE;YACrBgH,QAAQ,EAAG5F,CAAC,IAAKV,SAAS,CAAC0G,IAAI,KAAK;cAClC,GAAGA,IAAI;cACP,CAACpH,KAAK,GAAGoB,CAAC,CAAC8F,MAAM,CAAClJ;YACpB,CAAC,CAAC;UAAE;YAAAqI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG;MAAC,GAXAxG,KAAK;QAAAqG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYV,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnI,EAAA,CAnaIJ,mBAAmB;AAAAoJ,EAAA,GAAnBpJ,mBAAmB;AAqazB,eAAeA,mBAAmB;AAAC,IAAAoJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}